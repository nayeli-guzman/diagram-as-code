{
  "/home/ubuntu/diagram-as-code/back/user/serverless.yml": {
    "versionFramework": "4.17.1",
    "servicePath": "/home/ubuntu/diagram-as-code/back/user/serverless.yml",
    "serviceConfigFileName": "serverless.yml",
    "service": {
      "org": "adrianurbinamendoza",
      "service": "diagram-usuarios",
      "plugins": [
        "serverless-python-requirements"
      ],
      "provider": {
        "name": "aws",
        "runtime": "python3.13",
        "timeout": 30,
        "region": "us-east-1",
        "iam": {
          "role": "arn:aws:iam::254780740814:role/LabRole"
        },
        "environment": {
          "TABLE_NAME": "usuarios"
        },
        "stage": "dev",
        "versionFunctions": true,
        "compiledCloudFormationTemplate": {
          "AWSTemplateFormatVersion": "2010-09-09",
          "Description": "The AWS CloudFormation template for this Serverless application",
          "Resources": {
            "RegistrarLogGroup": {
              "Type": "AWS::Logs::LogGroup",
              "Properties": {
                "LogGroupName": "/aws/lambda/diagram-usuarios-dev-registrar"
              }
            },
            "ValidarLogGroup": {
              "Type": "AWS::Logs::LogGroup",
              "Properties": {
                "LogGroupName": "/aws/lambda/diagram-usuarios-dev-validar"
              }
            },
            "LoginLogGroup": {
              "Type": "AWS::Logs::LogGroup",
              "Properties": {
                "LogGroupName": "/aws/lambda/diagram-usuarios-dev-login"
              }
            },
            "RegistrarLambdaFunction": {
              "Type": "AWS::Lambda::Function",
              "Properties": {
                "Code": {
                  "S3Bucket": "serverless-framework-deployments-us-east-1-b0f2789c-f672",
                  "S3Key": "serverless/diagram-usuarios/dev/1750565490196-2025-06-22T04:11:30.196Z/diagram-usuarios.zip"
                },
                "Handler": "UserCreate.lambda_handler",
                "Runtime": "python3.13",
                "FunctionName": "diagram-usuarios-dev-registrar",
                "MemorySize": 1024,
                "Timeout": 30,
                "Environment": {
                  "Variables": {
                    "TABLE_NAME": "usuarios"
                  }
                },
                "Role": "arn:aws:iam::254780740814:role/LabRole"
              },
              "DependsOn": [
                "RegistrarLogGroup"
              ]
            },
            "ValidarLambdaFunction": {
              "Type": "AWS::Lambda::Function",
              "Properties": {
                "Code": {
                  "S3Bucket": "serverless-framework-deployments-us-east-1-b0f2789c-f672",
                  "S3Key": "serverless/diagram-usuarios/dev/1750565490196-2025-06-22T04:11:30.196Z/diagram-usuarios.zip"
                },
                "Handler": "UserValidar.lambda_handler",
                "Runtime": "python3.13",
                "FunctionName": "diagram-usuarios-dev-validar",
                "MemorySize": 1024,
                "Timeout": 30,
                "Environment": {
                  "Variables": {
                    "TABLE_NAME": "usuarios"
                  }
                },
                "Role": "arn:aws:iam::254780740814:role/LabRole"
              },
              "DependsOn": [
                "ValidarLogGroup"
              ]
            },
            "LoginLambdaFunction": {
              "Type": "AWS::Lambda::Function",
              "Properties": {
                "Code": {
                  "S3Bucket": "serverless-framework-deployments-us-east-1-b0f2789c-f672",
                  "S3Key": "serverless/diagram-usuarios/dev/1750565490196-2025-06-22T04:11:30.196Z/diagram-usuarios.zip"
                },
                "Handler": "UserLogin.lambda_handler",
                "Runtime": "python3.13",
                "FunctionName": "diagram-usuarios-dev-login",
                "MemorySize": 1024,
                "Timeout": 30,
                "Environment": {
                  "Variables": {
                    "TABLE_NAME": "usuarios"
                  }
                },
                "Role": "arn:aws:iam::254780740814:role/LabRole"
              },
              "DependsOn": [
                "LoginLogGroup"
              ]
            },
            "RegistrarLambdaVersion6JdBzmIptFNcna4PY1XBexQiLq3UOLz3c37bi5wk": {
              "Type": "AWS::Lambda::Version",
              "DeletionPolicy": "Retain",
              "Properties": {
                "FunctionName": {
                  "Ref": "RegistrarLambdaFunction"
                },
                "CodeSha256": "FxO9VeVmesj/+B7sJTLx6zBIHrUGG6/ID2PdJyXLlFI="
              }
            },
            "ValidarLambdaVersiont6hTNUKz6zHm3Og6R2vNOgH2d9P5r2LwI2Yuhm6KO18": {
              "Type": "AWS::Lambda::Version",
              "DeletionPolicy": "Retain",
              "Properties": {
                "FunctionName": {
                  "Ref": "ValidarLambdaFunction"
                },
                "CodeSha256": "FxO9VeVmesj/+B7sJTLx6zBIHrUGG6/ID2PdJyXLlFI="
              }
            },
            "LoginLambdaVersionkhsaEgmCCQAYVFCT2cmHiIazNkxrawVHXdMJ43ka7w": {
              "Type": "AWS::Lambda::Version",
              "DeletionPolicy": "Retain",
              "Properties": {
                "FunctionName": {
                  "Ref": "LoginLambdaFunction"
                },
                "CodeSha256": "FxO9VeVmesj/+B7sJTLx6zBIHrUGG6/ID2PdJyXLlFI="
              }
            },
            "ApiGatewayRestApi": {
              "Type": "AWS::ApiGateway::RestApi",
              "Properties": {
                "Name": "dev-diagram-usuarios",
                "EndpointConfiguration": {
                  "Types": [
                    "EDGE"
                  ]
                },
                "Policy": ""
              }
            },
            "ApiGatewayResourceUsuarios": {
              "Type": "AWS::ApiGateway::Resource",
              "Properties": {
                "ParentId": {
                  "Fn::GetAtt": [
                    "ApiGatewayRestApi",
                    "RootResourceId"
                  ]
                },
                "PathPart": "usuarios",
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                }
              }
            },
            "ApiGatewayResourceUsuariosRegistrar": {
              "Type": "AWS::ApiGateway::Resource",
              "Properties": {
                "ParentId": {
                  "Ref": "ApiGatewayResourceUsuarios"
                },
                "PathPart": "registrar",
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                }
              }
            },
            "ApiGatewayResourceUsuariosValidar": {
              "Type": "AWS::ApiGateway::Resource",
              "Properties": {
                "ParentId": {
                  "Ref": "ApiGatewayResourceUsuarios"
                },
                "PathPart": "validar",
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                }
              }
            },
            "ApiGatewayResourceUsuariosLogin": {
              "Type": "AWS::ApiGateway::Resource",
              "Properties": {
                "ParentId": {
                  "Ref": "ApiGatewayResourceUsuarios"
                },
                "PathPart": "login",
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                }
              }
            },
            "ApiGatewayMethodUsuariosRegistrarOptions": {
              "Type": "AWS::ApiGateway::Method",
              "Properties": {
                "AuthorizationType": "NONE",
                "HttpMethod": "OPTIONS",
                "MethodResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": true,
                      "method.response.header.Access-Control-Allow-Headers": true,
                      "method.response.header.Access-Control-Allow-Methods": true
                    },
                    "ResponseModels": {}
                  }
                ],
                "RequestParameters": {},
                "Integration": {
                  "Type": "MOCK",
                  "RequestTemplates": {
                    "application/json": "{statusCode:200}"
                  },
                  "ContentHandling": "CONVERT_TO_TEXT",
                  "IntegrationResponses": [
                    {
                      "StatusCode": "200",
                      "ResponseParameters": {
                        "method.response.header.Access-Control-Allow-Origin": "'*'",
                        "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                        "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,POST'"
                      },
                      "ResponseTemplates": {
                        "application/json": ""
                      }
                    }
                  ]
                },
                "ResourceId": {
                  "Ref": "ApiGatewayResourceUsuariosRegistrar"
                },
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                }
              }
            },
            "ApiGatewayMethodUsuariosValidarOptions": {
              "Type": "AWS::ApiGateway::Method",
              "Properties": {
                "AuthorizationType": "NONE",
                "HttpMethod": "OPTIONS",
                "MethodResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": true,
                      "method.response.header.Access-Control-Allow-Headers": true,
                      "method.response.header.Access-Control-Allow-Methods": true
                    },
                    "ResponseModels": {}
                  }
                ],
                "RequestParameters": {},
                "Integration": {
                  "Type": "MOCK",
                  "RequestTemplates": {
                    "application/json": "{statusCode:200}"
                  },
                  "ContentHandling": "CONVERT_TO_TEXT",
                  "IntegrationResponses": [
                    {
                      "StatusCode": "200",
                      "ResponseParameters": {
                        "method.response.header.Access-Control-Allow-Origin": "'*'",
                        "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                        "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,POST'"
                      },
                      "ResponseTemplates": {
                        "application/json": ""
                      }
                    }
                  ]
                },
                "ResourceId": {
                  "Ref": "ApiGatewayResourceUsuariosValidar"
                },
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                }
              }
            },
            "ApiGatewayMethodUsuariosLoginOptions": {
              "Type": "AWS::ApiGateway::Method",
              "Properties": {
                "AuthorizationType": "NONE",
                "HttpMethod": "OPTIONS",
                "MethodResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": true,
                      "method.response.header.Access-Control-Allow-Headers": true,
                      "method.response.header.Access-Control-Allow-Methods": true
                    },
                    "ResponseModels": {}
                  }
                ],
                "RequestParameters": {},
                "Integration": {
                  "Type": "MOCK",
                  "RequestTemplates": {
                    "application/json": "{statusCode:200}"
                  },
                  "ContentHandling": "CONVERT_TO_TEXT",
                  "IntegrationResponses": [
                    {
                      "StatusCode": "200",
                      "ResponseParameters": {
                        "method.response.header.Access-Control-Allow-Origin": "'*'",
                        "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                        "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,POST'"
                      },
                      "ResponseTemplates": {
                        "application/json": ""
                      }
                    }
                  ]
                },
                "ResourceId": {
                  "Ref": "ApiGatewayResourceUsuariosLogin"
                },
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                }
              }
            },
            "ApiGatewayMethodUsuariosRegistrarPost": {
              "Type": "AWS::ApiGateway::Method",
              "Properties": {
                "HttpMethod": "POST",
                "RequestParameters": {},
                "ResourceId": {
                  "Ref": "ApiGatewayResourceUsuariosRegistrar"
                },
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                },
                "ApiKeyRequired": "<REDACTED>",
                "AuthorizationType": "NONE",
                "Integration": {
                  "IntegrationHttpMethod": "POST",
                  "Type": "AWS",
                  "Uri": {
                    "Fn::Join": [
                      "",
                      [
                        "arn:",
                        {
                          "Ref": "AWS::Partition"
                        },
                        ":apigateway:",
                        {
                          "Ref": "AWS::Region"
                        },
                        ":lambda:path/2015-03-31/functions/",
                        {
                          "Fn::GetAtt": [
                            "RegistrarLambdaFunction",
                            "Arn"
                          ]
                        },
                        "/invocations"
                      ]
                    ]
                  },
                  "PassthroughBehavior": "NEVER",
                  "RequestTemplates": {
                    "application/json": "\n    #set( $body = $input.json(\"$\") )\n\n    \n  #define( $loop )\n    {\n    #foreach($key in $map.keySet())\n        #set( $k = $util.escapeJavaScript($key) )\n        #set( $v = $util.escapeJavaScript($map.get($key)).replaceAll(\"\\\\'\", \"'\") )\n        \"$k\":\n          \"$v\"\n          #if( $foreach.hasNext ) , #end\n    #end\n    }\n  #end\n\n  {\n    \"body\": $body,\n    \"method\": \"$context.httpMethod\",\n    \"principalId\": \"$context.authorizer.principalId\",\n    \"stage\": \"$context.stage\",\n\n    \"cognitoPoolClaims\" : {\n       \n       \"sub\": \"$context.authorizer.claims.sub\"\n    },\n\n    #set( $map = $context.authorizer )\n    \"enhancedAuthContext\": $loop,\n\n    #set( $map = $input.params().header )\n    \"headers\": $loop,\n\n    #set( $map = $input.params().querystring )\n    \"query\": $loop,\n\n    #set( $map = $input.params().path )\n    \"path\": $loop,\n\n    #set( $map = $context.identity )\n    \"identity\": $loop,\n\n    #set( $map = $stageVariables )\n    \"stageVariables\": $loop,\n\n    \"requestPath\": \"$context.resourcePath\"\n  }\n\n  ",
                    "application/x-www-form-urlencoded": "\n    #define( $body )\n      {\n      #foreach( $token in $input.path('$').split('&') )\n        #set( $keyVal = $token.split('=') )\n        #set( $keyValSize = $keyVal.size() )\n        #if( $keyValSize >= 1 )\n          #set( $key = $util.escapeJavaScript($util.urlDecode($keyVal[0])) )\n          #if( $keyValSize >= 2 )\n            #set($val = $util.escapeJavaScript($util.urlDecode($keyVal[1])).replaceAll(\"\\\\'\",\"'\"))\n          #else\n            #set( $val = '' )\n          #end\n          \"$key\": \"$val\"#if($foreach.hasNext),#end\n        #end\n      #end\n      }\n    #end\n\n    \n  #define( $loop )\n    {\n    #foreach($key in $map.keySet())\n        #set( $k = $util.escapeJavaScript($key) )\n        #set( $v = $util.escapeJavaScript($map.get($key)).replaceAll(\"\\\\'\", \"'\") )\n        \"$k\":\n          \"$v\"\n          #if( $foreach.hasNext ) , #end\n    #end\n    }\n  #end\n\n  {\n    \"body\": $body,\n    \"method\": \"$context.httpMethod\",\n    \"principalId\": \"$context.authorizer.principalId\",\n    \"stage\": \"$context.stage\",\n\n    \"cognitoPoolClaims\" : {\n       \n       \"sub\": \"$context.authorizer.claims.sub\"\n    },\n\n    #set( $map = $context.authorizer )\n    \"enhancedAuthContext\": $loop,\n\n    #set( $map = $input.params().header )\n    \"headers\": $loop,\n\n    #set( $map = $input.params().querystring )\n    \"query\": $loop,\n\n    #set( $map = $input.params().path )\n    \"path\": $loop,\n\n    #set( $map = $context.identity )\n    \"identity\": $loop,\n\n    #set( $map = $stageVariables )\n    \"stageVariables\": $loop,\n\n    \"requestPath\": \"$context.resourcePath\"\n  }\n\n  "
                  },
                  "IntegrationResponses": [
                    {
                      "StatusCode": "200",
                      "SelectionPattern": "",
                      "ResponseParameters": {
                        "method.response.header.Access-Control-Allow-Origin": "'*'"
                      },
                      "ResponseTemplates": {}
                    },
                    {
                      "StatusCode": "400",
                      "SelectionPattern": "[\\s\\S]*\\[400\\][\\s\\S]*",
                      "ResponseParameters": {
                        "method.response.header.Access-Control-Allow-Origin": "'*'"
                      },
                      "ResponseTemplates": {}
                    },
                    {
                      "StatusCode": "401",
                      "SelectionPattern": "[\\s\\S]*\\[401\\][\\s\\S]*",
                      "ResponseParameters": {
                        "method.response.header.Access-Control-Allow-Origin": "'*'"
                      },
                      "ResponseTemplates": {}
                    },
                    {
                      "StatusCode": "403",
                      "SelectionPattern": "[\\s\\S]*\\[403\\][\\s\\S]*",
                      "ResponseParameters": {
                        "method.response.header.Access-Control-Allow-Origin": "'*'"
                      },
                      "ResponseTemplates": {}
                    },
                    {
                      "StatusCode": "404",
                      "SelectionPattern": "[\\s\\S]*\\[404\\][\\s\\S]*",
                      "ResponseParameters": {
                        "method.response.header.Access-Control-Allow-Origin": "'*'"
                      },
                      "ResponseTemplates": {}
                    },
                    {
                      "StatusCode": "422",
                      "SelectionPattern": "[\\s\\S]*\\[422\\][\\s\\S]*",
                      "ResponseParameters": {
                        "method.response.header.Access-Control-Allow-Origin": "'*'"
                      },
                      "ResponseTemplates": {}
                    },
                    {
                      "StatusCode": "500",
                      "SelectionPattern": "[\\s\\S]*(Process\\s?exited\\s?before\\s?completing\\s?request|\\[500\\])[\\s\\S]*",
                      "ResponseParameters": {
                        "method.response.header.Access-Control-Allow-Origin": "'*'"
                      },
                      "ResponseTemplates": {}
                    },
                    {
                      "StatusCode": "502",
                      "SelectionPattern": "[\\s\\S]*\\[502\\][\\s\\S]*",
                      "ResponseParameters": {
                        "method.response.header.Access-Control-Allow-Origin": "'*'"
                      },
                      "ResponseTemplates": {}
                    },
                    {
                      "StatusCode": "504",
                      "SelectionPattern": "([\\s\\S]*\\[504\\][\\s\\S]*)|(.*Task timed out after \\d+\\.\\d+ seconds$)",
                      "ResponseParameters": {
                        "method.response.header.Access-Control-Allow-Origin": "'*'"
                      },
                      "ResponseTemplates": {}
                    }
                  ]
                },
                "MethodResponses": [
                  {
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": true
                    },
                    "ResponseModels": {},
                    "StatusCode": "200"
                  },
                  {
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": true
                    },
                    "ResponseModels": {},
                    "StatusCode": "400"
                  },
                  {
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": true
                    },
                    "ResponseModels": {},
                    "StatusCode": "401"
                  },
                  {
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": true
                    },
                    "ResponseModels": {},
                    "StatusCode": "403"
                  },
                  {
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": true
                    },
                    "ResponseModels": {},
                    "StatusCode": "404"
                  },
                  {
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": true
                    },
                    "ResponseModels": {},
                    "StatusCode": "422"
                  },
                  {
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": true
                    },
                    "ResponseModels": {},
                    "StatusCode": "500"
                  },
                  {
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": true
                    },
                    "ResponseModels": {},
                    "StatusCode": "502"
                  },
                  {
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": true
                    },
                    "ResponseModels": {},
                    "StatusCode": "504"
                  }
                ]
              },
              "DependsOn": [
                "RegistrarLambdaPermissionApiGateway"
              ]
            },
            "ApiGatewayMethodUsuariosValidarPost": {
              "Type": "AWS::ApiGateway::Method",
              "Properties": {
                "HttpMethod": "POST",
                "RequestParameters": {},
                "ResourceId": {
                  "Ref": "ApiGatewayResourceUsuariosValidar"
                },
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                },
                "ApiKeyRequired": "<REDACTED>",
                "AuthorizationType": "NONE",
                "Integration": {
                  "IntegrationHttpMethod": "POST",
                  "Type": "AWS",
                  "Uri": {
                    "Fn::Join": [
                      "",
                      [
                        "arn:",
                        {
                          "Ref": "AWS::Partition"
                        },
                        ":apigateway:",
                        {
                          "Ref": "AWS::Region"
                        },
                        ":lambda:path/2015-03-31/functions/",
                        {
                          "Fn::GetAtt": [
                            "ValidarLambdaFunction",
                            "Arn"
                          ]
                        },
                        "/invocations"
                      ]
                    ]
                  },
                  "PassthroughBehavior": "NEVER",
                  "RequestTemplates": {
                    "application/json": "\n    #set( $body = $input.json(\"$\") )\n\n    \n  #define( $loop )\n    {\n    #foreach($key in $map.keySet())\n        #set( $k = $util.escapeJavaScript($key) )\n        #set( $v = $util.escapeJavaScript($map.get($key)).replaceAll(\"\\\\'\", \"'\") )\n        \"$k\":\n          \"$v\"\n          #if( $foreach.hasNext ) , #end\n    #end\n    }\n  #end\n\n  {\n    \"body\": $body,\n    \"method\": \"$context.httpMethod\",\n    \"principalId\": \"$context.authorizer.principalId\",\n    \"stage\": \"$context.stage\",\n\n    \"cognitoPoolClaims\" : {\n       \n       \"sub\": \"$context.authorizer.claims.sub\"\n    },\n\n    #set( $map = $context.authorizer )\n    \"enhancedAuthContext\": $loop,\n\n    #set( $map = $input.params().header )\n    \"headers\": $loop,\n\n    #set( $map = $input.params().querystring )\n    \"query\": $loop,\n\n    #set( $map = $input.params().path )\n    \"path\": $loop,\n\n    #set( $map = $context.identity )\n    \"identity\": $loop,\n\n    #set( $map = $stageVariables )\n    \"stageVariables\": $loop,\n\n    \"requestPath\": \"$context.resourcePath\"\n  }\n\n  ",
                    "application/x-www-form-urlencoded": "\n    #define( $body )\n      {\n      #foreach( $token in $input.path('$').split('&') )\n        #set( $keyVal = $token.split('=') )\n        #set( $keyValSize = $keyVal.size() )\n        #if( $keyValSize >= 1 )\n          #set( $key = $util.escapeJavaScript($util.urlDecode($keyVal[0])) )\n          #if( $keyValSize >= 2 )\n            #set($val = $util.escapeJavaScript($util.urlDecode($keyVal[1])).replaceAll(\"\\\\'\",\"'\"))\n          #else\n            #set( $val = '' )\n          #end\n          \"$key\": \"$val\"#if($foreach.hasNext),#end\n        #end\n      #end\n      }\n    #end\n\n    \n  #define( $loop )\n    {\n    #foreach($key in $map.keySet())\n        #set( $k = $util.escapeJavaScript($key) )\n        #set( $v = $util.escapeJavaScript($map.get($key)).replaceAll(\"\\\\'\", \"'\") )\n        \"$k\":\n          \"$v\"\n          #if( $foreach.hasNext ) , #end\n    #end\n    }\n  #end\n\n  {\n    \"body\": $body,\n    \"method\": \"$context.httpMethod\",\n    \"principalId\": \"$context.authorizer.principalId\",\n    \"stage\": \"$context.stage\",\n\n    \"cognitoPoolClaims\" : {\n       \n       \"sub\": \"$context.authorizer.claims.sub\"\n    },\n\n    #set( $map = $context.authorizer )\n    \"enhancedAuthContext\": $loop,\n\n    #set( $map = $input.params().header )\n    \"headers\": $loop,\n\n    #set( $map = $input.params().querystring )\n    \"query\": $loop,\n\n    #set( $map = $input.params().path )\n    \"path\": $loop,\n\n    #set( $map = $context.identity )\n    \"identity\": $loop,\n\n    #set( $map = $stageVariables )\n    \"stageVariables\": $loop,\n\n    \"requestPath\": \"$context.resourcePath\"\n  }\n\n  "
                  },
                  "IntegrationResponses": [
                    {
                      "StatusCode": "200",
                      "SelectionPattern": "",
                      "ResponseParameters": {
                        "method.response.header.Access-Control-Allow-Origin": "'*'"
                      },
                      "ResponseTemplates": {}
                    },
                    {
                      "StatusCode": "400",
                      "SelectionPattern": "[\\s\\S]*\\[400\\][\\s\\S]*",
                      "ResponseParameters": {
                        "method.response.header.Access-Control-Allow-Origin": "'*'"
                      },
                      "ResponseTemplates": {}
                    },
                    {
                      "StatusCode": "401",
                      "SelectionPattern": "[\\s\\S]*\\[401\\][\\s\\S]*",
                      "ResponseParameters": {
                        "method.response.header.Access-Control-Allow-Origin": "'*'"
                      },
                      "ResponseTemplates": {}
                    },
                    {
                      "StatusCode": "403",
                      "SelectionPattern": "[\\s\\S]*\\[403\\][\\s\\S]*",
                      "ResponseParameters": {
                        "method.response.header.Access-Control-Allow-Origin": "'*'"
                      },
                      "ResponseTemplates": {}
                    },
                    {
                      "StatusCode": "404",
                      "SelectionPattern": "[\\s\\S]*\\[404\\][\\s\\S]*",
                      "ResponseParameters": {
                        "method.response.header.Access-Control-Allow-Origin": "'*'"
                      },
                      "ResponseTemplates": {}
                    },
                    {
                      "StatusCode": "422",
                      "SelectionPattern": "[\\s\\S]*\\[422\\][\\s\\S]*",
                      "ResponseParameters": {
                        "method.response.header.Access-Control-Allow-Origin": "'*'"
                      },
                      "ResponseTemplates": {}
                    },
                    {
                      "StatusCode": "500",
                      "SelectionPattern": "[\\s\\S]*(Process\\s?exited\\s?before\\s?completing\\s?request|\\[500\\])[\\s\\S]*",
                      "ResponseParameters": {
                        "method.response.header.Access-Control-Allow-Origin": "'*'"
                      },
                      "ResponseTemplates": {}
                    },
                    {
                      "StatusCode": "502",
                      "SelectionPattern": "[\\s\\S]*\\[502\\][\\s\\S]*",
                      "ResponseParameters": {
                        "method.response.header.Access-Control-Allow-Origin": "'*'"
                      },
                      "ResponseTemplates": {}
                    },
                    {
                      "StatusCode": "504",
                      "SelectionPattern": "([\\s\\S]*\\[504\\][\\s\\S]*)|(.*Task timed out after \\d+\\.\\d+ seconds$)",
                      "ResponseParameters": {
                        "method.response.header.Access-Control-Allow-Origin": "'*'"
                      },
                      "ResponseTemplates": {}
                    }
                  ]
                },
                "MethodResponses": [
                  {
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": true
                    },
                    "ResponseModels": {},
                    "StatusCode": "200"
                  },
                  {
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": true
                    },
                    "ResponseModels": {},
                    "StatusCode": "400"
                  },
                  {
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": true
                    },
                    "ResponseModels": {},
                    "StatusCode": "401"
                  },
                  {
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": true
                    },
                    "ResponseModels": {},
                    "StatusCode": "403"
                  },
                  {
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": true
                    },
                    "ResponseModels": {},
                    "StatusCode": "404"
                  },
                  {
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": true
                    },
                    "ResponseModels": {},
                    "StatusCode": "422"
                  },
                  {
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": true
                    },
                    "ResponseModels": {},
                    "StatusCode": "500"
                  },
                  {
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": true
                    },
                    "ResponseModels": {},
                    "StatusCode": "502"
                  },
                  {
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": true
                    },
                    "ResponseModels": {},
                    "StatusCode": "504"
                  }
                ]
              },
              "DependsOn": [
                "ValidarLambdaPermissionApiGateway"
              ]
            },
            "ApiGatewayMethodUsuariosLoginPost": {
              "Type": "AWS::ApiGateway::Method",
              "Properties": {
                "HttpMethod": "POST",
                "RequestParameters": {},
                "ResourceId": {
                  "Ref": "ApiGatewayResourceUsuariosLogin"
                },
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                },
                "ApiKeyRequired": "<REDACTED>",
                "AuthorizationType": "NONE",
                "Integration": {
                  "IntegrationHttpMethod": "POST",
                  "Type": "AWS",
                  "Uri": {
                    "Fn::Join": [
                      "",
                      [
                        "arn:",
                        {
                          "Ref": "AWS::Partition"
                        },
                        ":apigateway:",
                        {
                          "Ref": "AWS::Region"
                        },
                        ":lambda:path/2015-03-31/functions/",
                        {
                          "Fn::GetAtt": [
                            "LoginLambdaFunction",
                            "Arn"
                          ]
                        },
                        "/invocations"
                      ]
                    ]
                  },
                  "PassthroughBehavior": "NEVER",
                  "RequestTemplates": {
                    "application/json": "\n    #set( $body = $input.json(\"$\") )\n\n    \n  #define( $loop )\n    {\n    #foreach($key in $map.keySet())\n        #set( $k = $util.escapeJavaScript($key) )\n        #set( $v = $util.escapeJavaScript($map.get($key)).replaceAll(\"\\\\'\", \"'\") )\n        \"$k\":\n          \"$v\"\n          #if( $foreach.hasNext ) , #end\n    #end\n    }\n  #end\n\n  {\n    \"body\": $body,\n    \"method\": \"$context.httpMethod\",\n    \"principalId\": \"$context.authorizer.principalId\",\n    \"stage\": \"$context.stage\",\n\n    \"cognitoPoolClaims\" : {\n       \n       \"sub\": \"$context.authorizer.claims.sub\"\n    },\n\n    #set( $map = $context.authorizer )\n    \"enhancedAuthContext\": $loop,\n\n    #set( $map = $input.params().header )\n    \"headers\": $loop,\n\n    #set( $map = $input.params().querystring )\n    \"query\": $loop,\n\n    #set( $map = $input.params().path )\n    \"path\": $loop,\n\n    #set( $map = $context.identity )\n    \"identity\": $loop,\n\n    #set( $map = $stageVariables )\n    \"stageVariables\": $loop,\n\n    \"requestPath\": \"$context.resourcePath\"\n  }\n\n  ",
                    "application/x-www-form-urlencoded": "\n    #define( $body )\n      {\n      #foreach( $token in $input.path('$').split('&') )\n        #set( $keyVal = $token.split('=') )\n        #set( $keyValSize = $keyVal.size() )\n        #if( $keyValSize >= 1 )\n          #set( $key = $util.escapeJavaScript($util.urlDecode($keyVal[0])) )\n          #if( $keyValSize >= 2 )\n            #set($val = $util.escapeJavaScript($util.urlDecode($keyVal[1])).replaceAll(\"\\\\'\",\"'\"))\n          #else\n            #set( $val = '' )\n          #end\n          \"$key\": \"$val\"#if($foreach.hasNext),#end\n        #end\n      #end\n      }\n    #end\n\n    \n  #define( $loop )\n    {\n    #foreach($key in $map.keySet())\n        #set( $k = $util.escapeJavaScript($key) )\n        #set( $v = $util.escapeJavaScript($map.get($key)).replaceAll(\"\\\\'\", \"'\") )\n        \"$k\":\n          \"$v\"\n          #if( $foreach.hasNext ) , #end\n    #end\n    }\n  #end\n\n  {\n    \"body\": $body,\n    \"method\": \"$context.httpMethod\",\n    \"principalId\": \"$context.authorizer.principalId\",\n    \"stage\": \"$context.stage\",\n\n    \"cognitoPoolClaims\" : {\n       \n       \"sub\": \"$context.authorizer.claims.sub\"\n    },\n\n    #set( $map = $context.authorizer )\n    \"enhancedAuthContext\": $loop,\n\n    #set( $map = $input.params().header )\n    \"headers\": $loop,\n\n    #set( $map = $input.params().querystring )\n    \"query\": $loop,\n\n    #set( $map = $input.params().path )\n    \"path\": $loop,\n\n    #set( $map = $context.identity )\n    \"identity\": $loop,\n\n    #set( $map = $stageVariables )\n    \"stageVariables\": $loop,\n\n    \"requestPath\": \"$context.resourcePath\"\n  }\n\n  "
                  },
                  "IntegrationResponses": [
                    {
                      "StatusCode": "200",
                      "SelectionPattern": "",
                      "ResponseParameters": {
                        "method.response.header.Access-Control-Allow-Origin": "'*'"
                      },
                      "ResponseTemplates": {}
                    },
                    {
                      "StatusCode": "400",
                      "SelectionPattern": "[\\s\\S]*\\[400\\][\\s\\S]*",
                      "ResponseParameters": {
                        "method.response.header.Access-Control-Allow-Origin": "'*'"
                      },
                      "ResponseTemplates": {}
                    },
                    {
                      "StatusCode": "401",
                      "SelectionPattern": "[\\s\\S]*\\[401\\][\\s\\S]*",
                      "ResponseParameters": {
                        "method.response.header.Access-Control-Allow-Origin": "'*'"
                      },
                      "ResponseTemplates": {}
                    },
                    {
                      "StatusCode": "403",
                      "SelectionPattern": "[\\s\\S]*\\[403\\][\\s\\S]*",
                      "ResponseParameters": {
                        "method.response.header.Access-Control-Allow-Origin": "'*'"
                      },
                      "ResponseTemplates": {}
                    },
                    {
                      "StatusCode": "404",
                      "SelectionPattern": "[\\s\\S]*\\[404\\][\\s\\S]*",
                      "ResponseParameters": {
                        "method.response.header.Access-Control-Allow-Origin": "'*'"
                      },
                      "ResponseTemplates": {}
                    },
                    {
                      "StatusCode": "422",
                      "SelectionPattern": "[\\s\\S]*\\[422\\][\\s\\S]*",
                      "ResponseParameters": {
                        "method.response.header.Access-Control-Allow-Origin": "'*'"
                      },
                      "ResponseTemplates": {}
                    },
                    {
                      "StatusCode": "500",
                      "SelectionPattern": "[\\s\\S]*(Process\\s?exited\\s?before\\s?completing\\s?request|\\[500\\])[\\s\\S]*",
                      "ResponseParameters": {
                        "method.response.header.Access-Control-Allow-Origin": "'*'"
                      },
                      "ResponseTemplates": {}
                    },
                    {
                      "StatusCode": "502",
                      "SelectionPattern": "[\\s\\S]*\\[502\\][\\s\\S]*",
                      "ResponseParameters": {
                        "method.response.header.Access-Control-Allow-Origin": "'*'"
                      },
                      "ResponseTemplates": {}
                    },
                    {
                      "StatusCode": "504",
                      "SelectionPattern": "([\\s\\S]*\\[504\\][\\s\\S]*)|(.*Task timed out after \\d+\\.\\d+ seconds$)",
                      "ResponseParameters": {
                        "method.response.header.Access-Control-Allow-Origin": "'*'"
                      },
                      "ResponseTemplates": {}
                    }
                  ]
                },
                "MethodResponses": [
                  {
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": true
                    },
                    "ResponseModels": {},
                    "StatusCode": "200"
                  },
                  {
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": true
                    },
                    "ResponseModels": {},
                    "StatusCode": "400"
                  },
                  {
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": true
                    },
                    "ResponseModels": {},
                    "StatusCode": "401"
                  },
                  {
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": true
                    },
                    "ResponseModels": {},
                    "StatusCode": "403"
                  },
                  {
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": true
                    },
                    "ResponseModels": {},
                    "StatusCode": "404"
                  },
                  {
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": true
                    },
                    "ResponseModels": {},
                    "StatusCode": "422"
                  },
                  {
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": true
                    },
                    "ResponseModels": {},
                    "StatusCode": "500"
                  },
                  {
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": true
                    },
                    "ResponseModels": {},
                    "StatusCode": "502"
                  },
                  {
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": true
                    },
                    "ResponseModels": {},
                    "StatusCode": "504"
                  }
                ]
              },
              "DependsOn": [
                "LoginLambdaPermissionApiGateway"
              ]
            },
            "ApiGatewayDeployment1750565480167": {
              "Type": "AWS::ApiGateway::Deployment",
              "Properties": {
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                },
                "StageName": "dev"
              },
              "DependsOn": [
                "ApiGatewayMethodUsuariosRegistrarOptions",
                "ApiGatewayMethodUsuariosValidarOptions",
                "ApiGatewayMethodUsuariosLoginOptions",
                "ApiGatewayMethodUsuariosRegistrarPost",
                "ApiGatewayMethodUsuariosValidarPost",
                "ApiGatewayMethodUsuariosLoginPost"
              ]
            },
            "RegistrarLambdaPermissionApiGateway": {
              "Type": "AWS::Lambda::Permission",
              "Properties": {
                "FunctionName": {
                  "Fn::GetAtt": [
                    "RegistrarLambdaFunction",
                    "Arn"
                  ]
                },
                "Action": "lambda:InvokeFunction",
                "Principal": "apigateway.amazonaws.com",
                "SourceArn": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":execute-api:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":",
                      {
                        "Ref": "AWS::AccountId"
                      },
                      ":",
                      {
                        "Ref": "ApiGatewayRestApi"
                      },
                      "/*/*"
                    ]
                  ]
                }
              }
            },
            "ValidarLambdaPermissionApiGateway": {
              "Type": "AWS::Lambda::Permission",
              "Properties": {
                "FunctionName": {
                  "Fn::GetAtt": [
                    "ValidarLambdaFunction",
                    "Arn"
                  ]
                },
                "Action": "lambda:InvokeFunction",
                "Principal": "apigateway.amazonaws.com",
                "SourceArn": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":execute-api:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":",
                      {
                        "Ref": "AWS::AccountId"
                      },
                      ":",
                      {
                        "Ref": "ApiGatewayRestApi"
                      },
                      "/*/*"
                    ]
                  ]
                }
              }
            },
            "LoginLambdaPermissionApiGateway": {
              "Type": "AWS::Lambda::Permission",
              "Properties": {
                "FunctionName": {
                  "Fn::GetAtt": [
                    "LoginLambdaFunction",
                    "Arn"
                  ]
                },
                "Action": "lambda:InvokeFunction",
                "Principal": "apigateway.amazonaws.com",
                "SourceArn": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":execute-api:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":",
                      {
                        "Ref": "AWS::AccountId"
                      },
                      ":",
                      {
                        "Ref": "ApiGatewayRestApi"
                      },
                      "/*/*"
                    ]
                  ]
                }
              }
            },
            "Usuarios": {
              "Type": "AWS::DynamoDB::Table",
              "Properties": {
                "TableName": "usuarios",
                "AttributeDefinitions": [
                  {
                    "AttributeName": "tenant_id",
                    "AttributeType": "S"
                  },
                  {
                    "AttributeName": "user_id",
                    "AttributeType": "S"
                  }
                ],
                "KeySchema": [
                  {
                    "AttributeName": "tenant_id",
                    "KeyType": "HASH"
                  },
                  {
                    "AttributeName": "user_id",
                    "KeyType": "RANGE"
                  }
                ],
                "BillingMode": "PAY_PER_REQUEST"
              }
            },
            "TokenUsuarios": "<REDACTED>"
          },
          "Outputs": {
            "ServerlessDeploymentBucketName": {
              "Value": "serverless-framework-deployments-us-east-1-b0f2789c-f672",
              "Export": {
                "Name": "sls-diagram-usuarios-dev-ServerlessDeploymentBucketName"
              }
            },
            "RegistrarLambdaFunctionQualifiedArn": {
              "Description": "Current Lambda function version",
              "Value": {
                "Ref": "RegistrarLambdaVersion6JdBzmIptFNcna4PY1XBexQiLq3UOLz3c37bi5wk"
              },
              "Export": {
                "Name": "sls-diagram-usuarios-dev-RegistrarLambdaFunctionQualifiedArn"
              }
            },
            "ValidarLambdaFunctionQualifiedArn": {
              "Description": "Current Lambda function version",
              "Value": {
                "Ref": "ValidarLambdaVersiont6hTNUKz6zHm3Og6R2vNOgH2d9P5r2LwI2Yuhm6KO18"
              },
              "Export": {
                "Name": "sls-diagram-usuarios-dev-ValidarLambdaFunctionQualifiedArn"
              }
            },
            "LoginLambdaFunctionQualifiedArn": {
              "Description": "Current Lambda function version",
              "Value": {
                "Ref": "LoginLambdaVersionkhsaEgmCCQAYVFCT2cmHiIazNkxrawVHXdMJ43ka7w"
              },
              "Export": {
                "Name": "sls-diagram-usuarios-dev-LoginLambdaFunctionQualifiedArn"
              }
            },
            "ServiceEndpoint": {
              "Description": "URL of the service endpoint",
              "Value": {
                "Fn::Join": [
                  "",
                  [
                    "https://",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    ".execute-api.",
                    {
                      "Ref": "AWS::Region"
                    },
                    ".",
                    {
                      "Ref": "AWS::URLSuffix"
                    },
                    "/dev"
                  ]
                ]
              },
              "Export": {
                "Name": "sls-diagram-usuarios-dev-ServiceEndpoint"
              }
            }
          }
        },
        "vpc": {}
      },
      "custom": {
        "pythonRequirements": {
          "dockerizePip": true,
          "useDownloadCache": false,
          "useStaticCache": false
        }
      },
      "functions": {
        "registrar": {
          "handler": "UserCreate.lambda_handler",
          "events": [
            {
              "http": {
                "path": "usuarios/registrar",
                "method": "post",
                "cors": {
                  "origin": "*",
                  "methods": [
                    "OPTIONS",
                    "POST"
                  ],
                  "headers": [
                    "Content-Type",
                    "X-Amz-Date",
                    "Authorization",
                    "X-Api-Key",
                    "X-Amz-Security-Token",
                    "X-Amz-User-Agent",
                    "X-Amzn-Trace-Id"
                  ],
                  "allowCredentials": "<REDACTED>"
                },
                "integration": "AWS",
                "request": {
                  "passThrough": "NEVER"
                },
                "response": {
                  "statusCodes": {
                    "200": {
                      "pattern": ""
                    },
                    "400": {
                      "pattern": "[\\s\\S]*\\[400\\][\\s\\S]*"
                    },
                    "401": {
                      "pattern": "[\\s\\S]*\\[401\\][\\s\\S]*"
                    },
                    "403": {
                      "pattern": "[\\s\\S]*\\[403\\][\\s\\S]*"
                    },
                    "404": {
                      "pattern": "[\\s\\S]*\\[404\\][\\s\\S]*"
                    },
                    "422": {
                      "pattern": "[\\s\\S]*\\[422\\][\\s\\S]*"
                    },
                    "500": {
                      "pattern": "[\\s\\S]*(Process\\s?exited\\s?before\\s?completing\\s?request|\\[500\\])[\\s\\S]*"
                    },
                    "502": {
                      "pattern": "[\\s\\S]*\\[502\\][\\s\\S]*"
                    },
                    "504": {
                      "pattern": "([\\s\\S]*\\[504\\][\\s\\S]*)|(.*Task timed out after \\d+\\.\\d+ seconds$)"
                    }
                  }
                }
              }
            }
          ],
          "name": "diagram-usuarios-dev-registrar",
          "package": {},
          "memory": 1024,
          "timeout": 30,
          "runtime": "python3.13",
          "vpc": {},
          "versionLogicalId": "RegistrarLambdaVersion6JdBzmIptFNcna4PY1XBexQiLq3UOLz3c37bi5wk"
        },
        "validar": {
          "handler": "UserValidar.lambda_handler",
          "events": [
            {
              "http": {
                "path": "usuarios/validar",
                "method": "post",
                "cors": {
                  "origin": "*",
                  "methods": [
                    "OPTIONS",
                    "POST"
                  ],
                  "headers": [
                    "Content-Type",
                    "X-Amz-Date",
                    "Authorization",
                    "X-Api-Key",
                    "X-Amz-Security-Token",
                    "X-Amz-User-Agent",
                    "X-Amzn-Trace-Id"
                  ],
                  "allowCredentials": "<REDACTED>"
                },
                "integration": "AWS",
                "request": {
                  "passThrough": "NEVER"
                },
                "response": {
                  "statusCodes": {
                    "200": {
                      "pattern": ""
                    },
                    "400": {
                      "pattern": "[\\s\\S]*\\[400\\][\\s\\S]*"
                    },
                    "401": {
                      "pattern": "[\\s\\S]*\\[401\\][\\s\\S]*"
                    },
                    "403": {
                      "pattern": "[\\s\\S]*\\[403\\][\\s\\S]*"
                    },
                    "404": {
                      "pattern": "[\\s\\S]*\\[404\\][\\s\\S]*"
                    },
                    "422": {
                      "pattern": "[\\s\\S]*\\[422\\][\\s\\S]*"
                    },
                    "500": {
                      "pattern": "[\\s\\S]*(Process\\s?exited\\s?before\\s?completing\\s?request|\\[500\\])[\\s\\S]*"
                    },
                    "502": {
                      "pattern": "[\\s\\S]*\\[502\\][\\s\\S]*"
                    },
                    "504": {
                      "pattern": "([\\s\\S]*\\[504\\][\\s\\S]*)|(.*Task timed out after \\d+\\.\\d+ seconds$)"
                    }
                  }
                }
              }
            }
          ],
          "name": "diagram-usuarios-dev-validar",
          "package": {},
          "memory": 1024,
          "timeout": 30,
          "runtime": "python3.13",
          "vpc": {},
          "versionLogicalId": "ValidarLambdaVersiont6hTNUKz6zHm3Og6R2vNOgH2d9P5r2LwI2Yuhm6KO18"
        },
        "login": {
          "handler": "UserLogin.lambda_handler",
          "events": [
            {
              "http": {
                "path": "usuarios/login",
                "method": "post",
                "cors": {
                  "origin": "*",
                  "methods": [
                    "OPTIONS",
                    "POST"
                  ],
                  "headers": [
                    "Content-Type",
                    "X-Amz-Date",
                    "Authorization",
                    "X-Api-Key",
                    "X-Amz-Security-Token",
                    "X-Amz-User-Agent",
                    "X-Amzn-Trace-Id"
                  ],
                  "allowCredentials": "<REDACTED>"
                },
                "integration": "AWS",
                "request": {
                  "passThrough": "NEVER"
                },
                "response": {
                  "statusCodes": {
                    "200": {
                      "pattern": ""
                    },
                    "400": {
                      "pattern": "[\\s\\S]*\\[400\\][\\s\\S]*"
                    },
                    "401": {
                      "pattern": "[\\s\\S]*\\[401\\][\\s\\S]*"
                    },
                    "403": {
                      "pattern": "[\\s\\S]*\\[403\\][\\s\\S]*"
                    },
                    "404": {
                      "pattern": "[\\s\\S]*\\[404\\][\\s\\S]*"
                    },
                    "422": {
                      "pattern": "[\\s\\S]*\\[422\\][\\s\\S]*"
                    },
                    "500": {
                      "pattern": "[\\s\\S]*(Process\\s?exited\\s?before\\s?completing\\s?request|\\[500\\])[\\s\\S]*"
                    },
                    "502": {
                      "pattern": "[\\s\\S]*\\[502\\][\\s\\S]*"
                    },
                    "504": {
                      "pattern": "([\\s\\S]*\\[504\\][\\s\\S]*)|(.*Task timed out after \\d+\\.\\d+ seconds$)"
                    }
                  }
                }
              }
            }
          ],
          "name": "diagram-usuarios-dev-login",
          "package": {},
          "memory": 1024,
          "timeout": 30,
          "runtime": "python3.13",
          "vpc": {},
          "versionLogicalId": "LoginLambdaVersionkhsaEgmCCQAYVFCT2cmHiIazNkxrawVHXdMJ43ka7w"
        }
      },
      "resources": {
        "Resources": {
          "Usuarios": {
            "Type": "AWS::DynamoDB::Table",
            "Properties": {
              "TableName": "usuarios",
              "AttributeDefinitions": [
                {
                  "AttributeName": "tenant_id",
                  "AttributeType": "S"
                },
                {
                  "AttributeName": "user_id",
                  "AttributeType": "S"
                }
              ],
              "KeySchema": [
                {
                  "AttributeName": "tenant_id",
                  "KeyType": "HASH"
                },
                {
                  "AttributeName": "user_id",
                  "KeyType": "RANGE"
                }
              ],
              "BillingMode": "PAY_PER_REQUEST"
            }
          },
          "TokenUsuarios": "<REDACTED>"
        },
        "Outputs": {}
      }
    },
    "provider": {
      "name": "aws",
      "runtime": "python3.13",
      "timeout": 30,
      "region": "us-east-1",
      "iam": {
        "role": "arn:aws:iam::254780740814:role/LabRole"
      },
      "environment": {
        "TABLE_NAME": "usuarios"
      },
      "stage": "dev",
      "versionFunctions": true,
      "compiledCloudFormationTemplate": {
        "AWSTemplateFormatVersion": "2010-09-09",
        "Description": "The AWS CloudFormation template for this Serverless application",
        "Resources": {
          "RegistrarLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/diagram-usuarios-dev-registrar"
            }
          },
          "ValidarLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/diagram-usuarios-dev-validar"
            }
          },
          "LoginLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/diagram-usuarios-dev-login"
            }
          },
          "RegistrarLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": "serverless-framework-deployments-us-east-1-b0f2789c-f672",
                "S3Key": "serverless/diagram-usuarios/dev/1750565490196-2025-06-22T04:11:30.196Z/diagram-usuarios.zip"
              },
              "Handler": "UserCreate.lambda_handler",
              "Runtime": "python3.13",
              "FunctionName": "diagram-usuarios-dev-registrar",
              "MemorySize": 1024,
              "Timeout": 30,
              "Environment": {
                "Variables": {
                  "TABLE_NAME": "usuarios"
                }
              },
              "Role": "arn:aws:iam::254780740814:role/LabRole"
            },
            "DependsOn": [
              "RegistrarLogGroup"
            ]
          },
          "ValidarLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": "serverless-framework-deployments-us-east-1-b0f2789c-f672",
                "S3Key": "serverless/diagram-usuarios/dev/1750565490196-2025-06-22T04:11:30.196Z/diagram-usuarios.zip"
              },
              "Handler": "UserValidar.lambda_handler",
              "Runtime": "python3.13",
              "FunctionName": "diagram-usuarios-dev-validar",
              "MemorySize": 1024,
              "Timeout": 30,
              "Environment": {
                "Variables": {
                  "TABLE_NAME": "usuarios"
                }
              },
              "Role": "arn:aws:iam::254780740814:role/LabRole"
            },
            "DependsOn": [
              "ValidarLogGroup"
            ]
          },
          "LoginLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": "serverless-framework-deployments-us-east-1-b0f2789c-f672",
                "S3Key": "serverless/diagram-usuarios/dev/1750565490196-2025-06-22T04:11:30.196Z/diagram-usuarios.zip"
              },
              "Handler": "UserLogin.lambda_handler",
              "Runtime": "python3.13",
              "FunctionName": "diagram-usuarios-dev-login",
              "MemorySize": 1024,
              "Timeout": 30,
              "Environment": {
                "Variables": {
                  "TABLE_NAME": "usuarios"
                }
              },
              "Role": "arn:aws:iam::254780740814:role/LabRole"
            },
            "DependsOn": [
              "LoginLogGroup"
            ]
          },
          "RegistrarLambdaVersion6JdBzmIptFNcna4PY1XBexQiLq3UOLz3c37bi5wk": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "RegistrarLambdaFunction"
              },
              "CodeSha256": "FxO9VeVmesj/+B7sJTLx6zBIHrUGG6/ID2PdJyXLlFI="
            }
          },
          "ValidarLambdaVersiont6hTNUKz6zHm3Og6R2vNOgH2d9P5r2LwI2Yuhm6KO18": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "ValidarLambdaFunction"
              },
              "CodeSha256": "FxO9VeVmesj/+B7sJTLx6zBIHrUGG6/ID2PdJyXLlFI="
            }
          },
          "LoginLambdaVersionkhsaEgmCCQAYVFCT2cmHiIazNkxrawVHXdMJ43ka7w": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "LoginLambdaFunction"
              },
              "CodeSha256": "FxO9VeVmesj/+B7sJTLx6zBIHrUGG6/ID2PdJyXLlFI="
            }
          },
          "ApiGatewayRestApi": {
            "Type": "AWS::ApiGateway::RestApi",
            "Properties": {
              "Name": "dev-diagram-usuarios",
              "EndpointConfiguration": {
                "Types": [
                  "EDGE"
                ]
              },
              "Policy": ""
            }
          },
          "ApiGatewayResourceUsuarios": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Fn::GetAtt": [
                  "ApiGatewayRestApi",
                  "RootResourceId"
                ]
              },
              "PathPart": "usuarios",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceUsuariosRegistrar": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Ref": "ApiGatewayResourceUsuarios"
              },
              "PathPart": "registrar",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceUsuariosValidar": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Ref": "ApiGatewayResourceUsuarios"
              },
              "PathPart": "validar",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceUsuariosLogin": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Ref": "ApiGatewayResourceUsuarios"
              },
              "PathPart": "login",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayMethodUsuariosRegistrarOptions": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "AuthorizationType": "NONE",
              "HttpMethod": "OPTIONS",
              "MethodResponses": [
                {
                  "StatusCode": "200",
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true,
                    "method.response.header.Access-Control-Allow-Headers": true,
                    "method.response.header.Access-Control-Allow-Methods": true
                  },
                  "ResponseModels": {}
                }
              ],
              "RequestParameters": {},
              "Integration": {
                "Type": "MOCK",
                "RequestTemplates": {
                  "application/json": "{statusCode:200}"
                },
                "ContentHandling": "CONVERT_TO_TEXT",
                "IntegrationResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'*'",
                      "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                      "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,POST'"
                    },
                    "ResponseTemplates": {
                      "application/json": ""
                    }
                  }
                ]
              },
              "ResourceId": {
                "Ref": "ApiGatewayResourceUsuariosRegistrar"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayMethodUsuariosValidarOptions": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "AuthorizationType": "NONE",
              "HttpMethod": "OPTIONS",
              "MethodResponses": [
                {
                  "StatusCode": "200",
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true,
                    "method.response.header.Access-Control-Allow-Headers": true,
                    "method.response.header.Access-Control-Allow-Methods": true
                  },
                  "ResponseModels": {}
                }
              ],
              "RequestParameters": {},
              "Integration": {
                "Type": "MOCK",
                "RequestTemplates": {
                  "application/json": "{statusCode:200}"
                },
                "ContentHandling": "CONVERT_TO_TEXT",
                "IntegrationResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'*'",
                      "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                      "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,POST'"
                    },
                    "ResponseTemplates": {
                      "application/json": ""
                    }
                  }
                ]
              },
              "ResourceId": {
                "Ref": "ApiGatewayResourceUsuariosValidar"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayMethodUsuariosLoginOptions": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "AuthorizationType": "NONE",
              "HttpMethod": "OPTIONS",
              "MethodResponses": [
                {
                  "StatusCode": "200",
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true,
                    "method.response.header.Access-Control-Allow-Headers": true,
                    "method.response.header.Access-Control-Allow-Methods": true
                  },
                  "ResponseModels": {}
                }
              ],
              "RequestParameters": {},
              "Integration": {
                "Type": "MOCK",
                "RequestTemplates": {
                  "application/json": "{statusCode:200}"
                },
                "ContentHandling": "CONVERT_TO_TEXT",
                "IntegrationResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'*'",
                      "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                      "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,POST'"
                    },
                    "ResponseTemplates": {
                      "application/json": ""
                    }
                  }
                ]
              },
              "ResourceId": {
                "Ref": "ApiGatewayResourceUsuariosLogin"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayMethodUsuariosRegistrarPost": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "POST",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceUsuariosRegistrar"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": "<REDACTED>",
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "RegistrarLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                },
                "PassthroughBehavior": "NEVER",
                "RequestTemplates": {
                  "application/json": "\n    #set( $body = $input.json(\"$\") )\n\n    \n  #define( $loop )\n    {\n    #foreach($key in $map.keySet())\n        #set( $k = $util.escapeJavaScript($key) )\n        #set( $v = $util.escapeJavaScript($map.get($key)).replaceAll(\"\\\\'\", \"'\") )\n        \"$k\":\n          \"$v\"\n          #if( $foreach.hasNext ) , #end\n    #end\n    }\n  #end\n\n  {\n    \"body\": $body,\n    \"method\": \"$context.httpMethod\",\n    \"principalId\": \"$context.authorizer.principalId\",\n    \"stage\": \"$context.stage\",\n\n    \"cognitoPoolClaims\" : {\n       \n       \"sub\": \"$context.authorizer.claims.sub\"\n    },\n\n    #set( $map = $context.authorizer )\n    \"enhancedAuthContext\": $loop,\n\n    #set( $map = $input.params().header )\n    \"headers\": $loop,\n\n    #set( $map = $input.params().querystring )\n    \"query\": $loop,\n\n    #set( $map = $input.params().path )\n    \"path\": $loop,\n\n    #set( $map = $context.identity )\n    \"identity\": $loop,\n\n    #set( $map = $stageVariables )\n    \"stageVariables\": $loop,\n\n    \"requestPath\": \"$context.resourcePath\"\n  }\n\n  ",
                  "application/x-www-form-urlencoded": "\n    #define( $body )\n      {\n      #foreach( $token in $input.path('$').split('&') )\n        #set( $keyVal = $token.split('=') )\n        #set( $keyValSize = $keyVal.size() )\n        #if( $keyValSize >= 1 )\n          #set( $key = $util.escapeJavaScript($util.urlDecode($keyVal[0])) )\n          #if( $keyValSize >= 2 )\n            #set($val = $util.escapeJavaScript($util.urlDecode($keyVal[1])).replaceAll(\"\\\\'\",\"'\"))\n          #else\n            #set( $val = '' )\n          #end\n          \"$key\": \"$val\"#if($foreach.hasNext),#end\n        #end\n      #end\n      }\n    #end\n\n    \n  #define( $loop )\n    {\n    #foreach($key in $map.keySet())\n        #set( $k = $util.escapeJavaScript($key) )\n        #set( $v = $util.escapeJavaScript($map.get($key)).replaceAll(\"\\\\'\", \"'\") )\n        \"$k\":\n          \"$v\"\n          #if( $foreach.hasNext ) , #end\n    #end\n    }\n  #end\n\n  {\n    \"body\": $body,\n    \"method\": \"$context.httpMethod\",\n    \"principalId\": \"$context.authorizer.principalId\",\n    \"stage\": \"$context.stage\",\n\n    \"cognitoPoolClaims\" : {\n       \n       \"sub\": \"$context.authorizer.claims.sub\"\n    },\n\n    #set( $map = $context.authorizer )\n    \"enhancedAuthContext\": $loop,\n\n    #set( $map = $input.params().header )\n    \"headers\": $loop,\n\n    #set( $map = $input.params().querystring )\n    \"query\": $loop,\n\n    #set( $map = $input.params().path )\n    \"path\": $loop,\n\n    #set( $map = $context.identity )\n    \"identity\": $loop,\n\n    #set( $map = $stageVariables )\n    \"stageVariables\": $loop,\n\n    \"requestPath\": \"$context.resourcePath\"\n  }\n\n  "
                },
                "IntegrationResponses": [
                  {
                    "StatusCode": "200",
                    "SelectionPattern": "",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'*'"
                    },
                    "ResponseTemplates": {}
                  },
                  {
                    "StatusCode": "400",
                    "SelectionPattern": "[\\s\\S]*\\[400\\][\\s\\S]*",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'*'"
                    },
                    "ResponseTemplates": {}
                  },
                  {
                    "StatusCode": "401",
                    "SelectionPattern": "[\\s\\S]*\\[401\\][\\s\\S]*",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'*'"
                    },
                    "ResponseTemplates": {}
                  },
                  {
                    "StatusCode": "403",
                    "SelectionPattern": "[\\s\\S]*\\[403\\][\\s\\S]*",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'*'"
                    },
                    "ResponseTemplates": {}
                  },
                  {
                    "StatusCode": "404",
                    "SelectionPattern": "[\\s\\S]*\\[404\\][\\s\\S]*",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'*'"
                    },
                    "ResponseTemplates": {}
                  },
                  {
                    "StatusCode": "422",
                    "SelectionPattern": "[\\s\\S]*\\[422\\][\\s\\S]*",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'*'"
                    },
                    "ResponseTemplates": {}
                  },
                  {
                    "StatusCode": "500",
                    "SelectionPattern": "[\\s\\S]*(Process\\s?exited\\s?before\\s?completing\\s?request|\\[500\\])[\\s\\S]*",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'*'"
                    },
                    "ResponseTemplates": {}
                  },
                  {
                    "StatusCode": "502",
                    "SelectionPattern": "[\\s\\S]*\\[502\\][\\s\\S]*",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'*'"
                    },
                    "ResponseTemplates": {}
                  },
                  {
                    "StatusCode": "504",
                    "SelectionPattern": "([\\s\\S]*\\[504\\][\\s\\S]*)|(.*Task timed out after \\d+\\.\\d+ seconds$)",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'*'"
                    },
                    "ResponseTemplates": {}
                  }
                ]
              },
              "MethodResponses": [
                {
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true
                  },
                  "ResponseModels": {},
                  "StatusCode": "200"
                },
                {
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true
                  },
                  "ResponseModels": {},
                  "StatusCode": "400"
                },
                {
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true
                  },
                  "ResponseModels": {},
                  "StatusCode": "401"
                },
                {
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true
                  },
                  "ResponseModels": {},
                  "StatusCode": "403"
                },
                {
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true
                  },
                  "ResponseModels": {},
                  "StatusCode": "404"
                },
                {
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true
                  },
                  "ResponseModels": {},
                  "StatusCode": "422"
                },
                {
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true
                  },
                  "ResponseModels": {},
                  "StatusCode": "500"
                },
                {
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true
                  },
                  "ResponseModels": {},
                  "StatusCode": "502"
                },
                {
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true
                  },
                  "ResponseModels": {},
                  "StatusCode": "504"
                }
              ]
            },
            "DependsOn": [
              "RegistrarLambdaPermissionApiGateway"
            ]
          },
          "ApiGatewayMethodUsuariosValidarPost": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "POST",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceUsuariosValidar"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": "<REDACTED>",
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "ValidarLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                },
                "PassthroughBehavior": "NEVER",
                "RequestTemplates": {
                  "application/json": "\n    #set( $body = $input.json(\"$\") )\n\n    \n  #define( $loop )\n    {\n    #foreach($key in $map.keySet())\n        #set( $k = $util.escapeJavaScript($key) )\n        #set( $v = $util.escapeJavaScript($map.get($key)).replaceAll(\"\\\\'\", \"'\") )\n        \"$k\":\n          \"$v\"\n          #if( $foreach.hasNext ) , #end\n    #end\n    }\n  #end\n\n  {\n    \"body\": $body,\n    \"method\": \"$context.httpMethod\",\n    \"principalId\": \"$context.authorizer.principalId\",\n    \"stage\": \"$context.stage\",\n\n    \"cognitoPoolClaims\" : {\n       \n       \"sub\": \"$context.authorizer.claims.sub\"\n    },\n\n    #set( $map = $context.authorizer )\n    \"enhancedAuthContext\": $loop,\n\n    #set( $map = $input.params().header )\n    \"headers\": $loop,\n\n    #set( $map = $input.params().querystring )\n    \"query\": $loop,\n\n    #set( $map = $input.params().path )\n    \"path\": $loop,\n\n    #set( $map = $context.identity )\n    \"identity\": $loop,\n\n    #set( $map = $stageVariables )\n    \"stageVariables\": $loop,\n\n    \"requestPath\": \"$context.resourcePath\"\n  }\n\n  ",
                  "application/x-www-form-urlencoded": "\n    #define( $body )\n      {\n      #foreach( $token in $input.path('$').split('&') )\n        #set( $keyVal = $token.split('=') )\n        #set( $keyValSize = $keyVal.size() )\n        #if( $keyValSize >= 1 )\n          #set( $key = $util.escapeJavaScript($util.urlDecode($keyVal[0])) )\n          #if( $keyValSize >= 2 )\n            #set($val = $util.escapeJavaScript($util.urlDecode($keyVal[1])).replaceAll(\"\\\\'\",\"'\"))\n          #else\n            #set( $val = '' )\n          #end\n          \"$key\": \"$val\"#if($foreach.hasNext),#end\n        #end\n      #end\n      }\n    #end\n\n    \n  #define( $loop )\n    {\n    #foreach($key in $map.keySet())\n        #set( $k = $util.escapeJavaScript($key) )\n        #set( $v = $util.escapeJavaScript($map.get($key)).replaceAll(\"\\\\'\", \"'\") )\n        \"$k\":\n          \"$v\"\n          #if( $foreach.hasNext ) , #end\n    #end\n    }\n  #end\n\n  {\n    \"body\": $body,\n    \"method\": \"$context.httpMethod\",\n    \"principalId\": \"$context.authorizer.principalId\",\n    \"stage\": \"$context.stage\",\n\n    \"cognitoPoolClaims\" : {\n       \n       \"sub\": \"$context.authorizer.claims.sub\"\n    },\n\n    #set( $map = $context.authorizer )\n    \"enhancedAuthContext\": $loop,\n\n    #set( $map = $input.params().header )\n    \"headers\": $loop,\n\n    #set( $map = $input.params().querystring )\n    \"query\": $loop,\n\n    #set( $map = $input.params().path )\n    \"path\": $loop,\n\n    #set( $map = $context.identity )\n    \"identity\": $loop,\n\n    #set( $map = $stageVariables )\n    \"stageVariables\": $loop,\n\n    \"requestPath\": \"$context.resourcePath\"\n  }\n\n  "
                },
                "IntegrationResponses": [
                  {
                    "StatusCode": "200",
                    "SelectionPattern": "",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'*'"
                    },
                    "ResponseTemplates": {}
                  },
                  {
                    "StatusCode": "400",
                    "SelectionPattern": "[\\s\\S]*\\[400\\][\\s\\S]*",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'*'"
                    },
                    "ResponseTemplates": {}
                  },
                  {
                    "StatusCode": "401",
                    "SelectionPattern": "[\\s\\S]*\\[401\\][\\s\\S]*",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'*'"
                    },
                    "ResponseTemplates": {}
                  },
                  {
                    "StatusCode": "403",
                    "SelectionPattern": "[\\s\\S]*\\[403\\][\\s\\S]*",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'*'"
                    },
                    "ResponseTemplates": {}
                  },
                  {
                    "StatusCode": "404",
                    "SelectionPattern": "[\\s\\S]*\\[404\\][\\s\\S]*",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'*'"
                    },
                    "ResponseTemplates": {}
                  },
                  {
                    "StatusCode": "422",
                    "SelectionPattern": "[\\s\\S]*\\[422\\][\\s\\S]*",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'*'"
                    },
                    "ResponseTemplates": {}
                  },
                  {
                    "StatusCode": "500",
                    "SelectionPattern": "[\\s\\S]*(Process\\s?exited\\s?before\\s?completing\\s?request|\\[500\\])[\\s\\S]*",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'*'"
                    },
                    "ResponseTemplates": {}
                  },
                  {
                    "StatusCode": "502",
                    "SelectionPattern": "[\\s\\S]*\\[502\\][\\s\\S]*",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'*'"
                    },
                    "ResponseTemplates": {}
                  },
                  {
                    "StatusCode": "504",
                    "SelectionPattern": "([\\s\\S]*\\[504\\][\\s\\S]*)|(.*Task timed out after \\d+\\.\\d+ seconds$)",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'*'"
                    },
                    "ResponseTemplates": {}
                  }
                ]
              },
              "MethodResponses": [
                {
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true
                  },
                  "ResponseModels": {},
                  "StatusCode": "200"
                },
                {
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true
                  },
                  "ResponseModels": {},
                  "StatusCode": "400"
                },
                {
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true
                  },
                  "ResponseModels": {},
                  "StatusCode": "401"
                },
                {
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true
                  },
                  "ResponseModels": {},
                  "StatusCode": "403"
                },
                {
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true
                  },
                  "ResponseModels": {},
                  "StatusCode": "404"
                },
                {
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true
                  },
                  "ResponseModels": {},
                  "StatusCode": "422"
                },
                {
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true
                  },
                  "ResponseModels": {},
                  "StatusCode": "500"
                },
                {
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true
                  },
                  "ResponseModels": {},
                  "StatusCode": "502"
                },
                {
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true
                  },
                  "ResponseModels": {},
                  "StatusCode": "504"
                }
              ]
            },
            "DependsOn": [
              "ValidarLambdaPermissionApiGateway"
            ]
          },
          "ApiGatewayMethodUsuariosLoginPost": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "POST",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceUsuariosLogin"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": "<REDACTED>",
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "LoginLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                },
                "PassthroughBehavior": "NEVER",
                "RequestTemplates": {
                  "application/json": "\n    #set( $body = $input.json(\"$\") )\n\n    \n  #define( $loop )\n    {\n    #foreach($key in $map.keySet())\n        #set( $k = $util.escapeJavaScript($key) )\n        #set( $v = $util.escapeJavaScript($map.get($key)).replaceAll(\"\\\\'\", \"'\") )\n        \"$k\":\n          \"$v\"\n          #if( $foreach.hasNext ) , #end\n    #end\n    }\n  #end\n\n  {\n    \"body\": $body,\n    \"method\": \"$context.httpMethod\",\n    \"principalId\": \"$context.authorizer.principalId\",\n    \"stage\": \"$context.stage\",\n\n    \"cognitoPoolClaims\" : {\n       \n       \"sub\": \"$context.authorizer.claims.sub\"\n    },\n\n    #set( $map = $context.authorizer )\n    \"enhancedAuthContext\": $loop,\n\n    #set( $map = $input.params().header )\n    \"headers\": $loop,\n\n    #set( $map = $input.params().querystring )\n    \"query\": $loop,\n\n    #set( $map = $input.params().path )\n    \"path\": $loop,\n\n    #set( $map = $context.identity )\n    \"identity\": $loop,\n\n    #set( $map = $stageVariables )\n    \"stageVariables\": $loop,\n\n    \"requestPath\": \"$context.resourcePath\"\n  }\n\n  ",
                  "application/x-www-form-urlencoded": "\n    #define( $body )\n      {\n      #foreach( $token in $input.path('$').split('&') )\n        #set( $keyVal = $token.split('=') )\n        #set( $keyValSize = $keyVal.size() )\n        #if( $keyValSize >= 1 )\n          #set( $key = $util.escapeJavaScript($util.urlDecode($keyVal[0])) )\n          #if( $keyValSize >= 2 )\n            #set($val = $util.escapeJavaScript($util.urlDecode($keyVal[1])).replaceAll(\"\\\\'\",\"'\"))\n          #else\n            #set( $val = '' )\n          #end\n          \"$key\": \"$val\"#if($foreach.hasNext),#end\n        #end\n      #end\n      }\n    #end\n\n    \n  #define( $loop )\n    {\n    #foreach($key in $map.keySet())\n        #set( $k = $util.escapeJavaScript($key) )\n        #set( $v = $util.escapeJavaScript($map.get($key)).replaceAll(\"\\\\'\", \"'\") )\n        \"$k\":\n          \"$v\"\n          #if( $foreach.hasNext ) , #end\n    #end\n    }\n  #end\n\n  {\n    \"body\": $body,\n    \"method\": \"$context.httpMethod\",\n    \"principalId\": \"$context.authorizer.principalId\",\n    \"stage\": \"$context.stage\",\n\n    \"cognitoPoolClaims\" : {\n       \n       \"sub\": \"$context.authorizer.claims.sub\"\n    },\n\n    #set( $map = $context.authorizer )\n    \"enhancedAuthContext\": $loop,\n\n    #set( $map = $input.params().header )\n    \"headers\": $loop,\n\n    #set( $map = $input.params().querystring )\n    \"query\": $loop,\n\n    #set( $map = $input.params().path )\n    \"path\": $loop,\n\n    #set( $map = $context.identity )\n    \"identity\": $loop,\n\n    #set( $map = $stageVariables )\n    \"stageVariables\": $loop,\n\n    \"requestPath\": \"$context.resourcePath\"\n  }\n\n  "
                },
                "IntegrationResponses": [
                  {
                    "StatusCode": "200",
                    "SelectionPattern": "",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'*'"
                    },
                    "ResponseTemplates": {}
                  },
                  {
                    "StatusCode": "400",
                    "SelectionPattern": "[\\s\\S]*\\[400\\][\\s\\S]*",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'*'"
                    },
                    "ResponseTemplates": {}
                  },
                  {
                    "StatusCode": "401",
                    "SelectionPattern": "[\\s\\S]*\\[401\\][\\s\\S]*",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'*'"
                    },
                    "ResponseTemplates": {}
                  },
                  {
                    "StatusCode": "403",
                    "SelectionPattern": "[\\s\\S]*\\[403\\][\\s\\S]*",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'*'"
                    },
                    "ResponseTemplates": {}
                  },
                  {
                    "StatusCode": "404",
                    "SelectionPattern": "[\\s\\S]*\\[404\\][\\s\\S]*",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'*'"
                    },
                    "ResponseTemplates": {}
                  },
                  {
                    "StatusCode": "422",
                    "SelectionPattern": "[\\s\\S]*\\[422\\][\\s\\S]*",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'*'"
                    },
                    "ResponseTemplates": {}
                  },
                  {
                    "StatusCode": "500",
                    "SelectionPattern": "[\\s\\S]*(Process\\s?exited\\s?before\\s?completing\\s?request|\\[500\\])[\\s\\S]*",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'*'"
                    },
                    "ResponseTemplates": {}
                  },
                  {
                    "StatusCode": "502",
                    "SelectionPattern": "[\\s\\S]*\\[502\\][\\s\\S]*",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'*'"
                    },
                    "ResponseTemplates": {}
                  },
                  {
                    "StatusCode": "504",
                    "SelectionPattern": "([\\s\\S]*\\[504\\][\\s\\S]*)|(.*Task timed out after \\d+\\.\\d+ seconds$)",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'*'"
                    },
                    "ResponseTemplates": {}
                  }
                ]
              },
              "MethodResponses": [
                {
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true
                  },
                  "ResponseModels": {},
                  "StatusCode": "200"
                },
                {
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true
                  },
                  "ResponseModels": {},
                  "StatusCode": "400"
                },
                {
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true
                  },
                  "ResponseModels": {},
                  "StatusCode": "401"
                },
                {
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true
                  },
                  "ResponseModels": {},
                  "StatusCode": "403"
                },
                {
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true
                  },
                  "ResponseModels": {},
                  "StatusCode": "404"
                },
                {
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true
                  },
                  "ResponseModels": {},
                  "StatusCode": "422"
                },
                {
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true
                  },
                  "ResponseModels": {},
                  "StatusCode": "500"
                },
                {
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true
                  },
                  "ResponseModels": {},
                  "StatusCode": "502"
                },
                {
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true
                  },
                  "ResponseModels": {},
                  "StatusCode": "504"
                }
              ]
            },
            "DependsOn": [
              "LoginLambdaPermissionApiGateway"
            ]
          },
          "ApiGatewayDeployment1750565480167": {
            "Type": "AWS::ApiGateway::Deployment",
            "Properties": {
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "StageName": "dev"
            },
            "DependsOn": [
              "ApiGatewayMethodUsuariosRegistrarOptions",
              "ApiGatewayMethodUsuariosValidarOptions",
              "ApiGatewayMethodUsuariosLoginOptions",
              "ApiGatewayMethodUsuariosRegistrarPost",
              "ApiGatewayMethodUsuariosValidarPost",
              "ApiGatewayMethodUsuariosLoginPost"
            ]
          },
          "RegistrarLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "RegistrarLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "ValidarLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "ValidarLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "LoginLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "LoginLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "Usuarios": {
            "Type": "AWS::DynamoDB::Table",
            "Properties": {
              "TableName": "usuarios",
              "AttributeDefinitions": [
                {
                  "AttributeName": "tenant_id",
                  "AttributeType": "S"
                },
                {
                  "AttributeName": "user_id",
                  "AttributeType": "S"
                }
              ],
              "KeySchema": [
                {
                  "AttributeName": "tenant_id",
                  "KeyType": "HASH"
                },
                {
                  "AttributeName": "user_id",
                  "KeyType": "RANGE"
                }
              ],
              "BillingMode": "PAY_PER_REQUEST"
            }
          },
          "TokenUsuarios": "<REDACTED>"
        },
        "Outputs": {
          "ServerlessDeploymentBucketName": {
            "Value": "serverless-framework-deployments-us-east-1-b0f2789c-f672",
            "Export": {
              "Name": "sls-diagram-usuarios-dev-ServerlessDeploymentBucketName"
            }
          },
          "RegistrarLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "RegistrarLambdaVersion6JdBzmIptFNcna4PY1XBexQiLq3UOLz3c37bi5wk"
            },
            "Export": {
              "Name": "sls-diagram-usuarios-dev-RegistrarLambdaFunctionQualifiedArn"
            }
          },
          "ValidarLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "ValidarLambdaVersiont6hTNUKz6zHm3Og6R2vNOgH2d9P5r2LwI2Yuhm6KO18"
            },
            "Export": {
              "Name": "sls-diagram-usuarios-dev-ValidarLambdaFunctionQualifiedArn"
            }
          },
          "LoginLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "LoginLambdaVersionkhsaEgmCCQAYVFCT2cmHiIazNkxrawVHXdMJ43ka7w"
            },
            "Export": {
              "Name": "sls-diagram-usuarios-dev-LoginLambdaFunctionQualifiedArn"
            }
          },
          "ServiceEndpoint": {
            "Description": "URL of the service endpoint",
            "Value": {
              "Fn::Join": [
                "",
                [
                  "https://",
                  {
                    "Ref": "ApiGatewayRestApi"
                  },
                  ".execute-api.",
                  {
                    "Ref": "AWS::Region"
                  },
                  ".",
                  {
                    "Ref": "AWS::URLSuffix"
                  },
                  "/dev"
                ]
              ]
            },
            "Export": {
              "Name": "sls-diagram-usuarios-dev-ServiceEndpoint"
            }
          }
        }
      },
      "vpc": {}
    },
    "dashboard": {
      "isEnabledForService": false,
      "requiredAuthentication": false,
      "orgFeaturesInUse": null,
      "orgObservabilityIntegrations": null,
      "serviceAppId": null,
      "serviceProvider": null,
      "instanceParameters": null
    },
    "serviceRawFile": "org: adrianurbinamendoza\nservice: diagram-usuarios\n\nplugins:\n  - serverless-python-requirements\n\nprovider:\n  name: aws\n  runtime: python3.13\n  timeout: 30\n  region: us-east-1\n  iam:\n    role: arn:aws:iam::254780740814:role/LabRole\n  environment:\n    TABLE_NAME: usuarios\n\ncustom:\n  pythonRequirements:\n    dockerizePip: true\n    useDownloadCache: false\n    useStaticCache: false\n\nfunctions:\n  registrar:\n    handler: UserCreate.lambda_handler\n    events:\n      - http:\n          path: /usuarios/registrar\n          method: post\n          cors: true\n          integration: lambda\n\n  validar:\n    handler: UserValidar.lambda_handler\n    events:\n      - http:\n          path: /usuarios/validar\n          method: post\n          cors: true\n          integration: lambda\n\n  login:\n    handler: UserLogin.lambda_handler\n    events:\n      - http:\n          path: /usuarios/login\n          method: post\n          cors: true\n          integration: lambda\n\nresources:\n  Resources:\n    Usuarios:\n      Type: AWS::DynamoDB::Table\n      Properties:\n        TableName: ${self:provider.environment.TABLE_NAME}\n        AttributeDefinitions:\n          - AttributeName: tenant_id\n            AttributeType: S\n          - AttributeName: user_id\n            AttributeType: S\n        KeySchema:\n          - AttributeName: tenant_id\n            KeyType: HASH\n          - AttributeName: user_id\n            KeyType: RANGE\n        BillingMode: PAY_PER_REQUEST\n    TokenUsuarios:\n      Type: AWS::DynamoDB::Table\n      Properties:\n        TableName: ${self:provider.environment.TABLE_NAME}-token\n        AttributeDefinitions:\n          - AttributeName: tenant_id\n            AttributeType: S\n          - AttributeName: token\n            AttributeType: S\n        KeySchema:\n          - AttributeName: tenant_id\n            KeyType: HASH\n          - AttributeName: token\n            KeyType: RANGE\n        BillingMode: PAY_PER_REQUEST",
    "command": [
      "deploy"
    ],
    "options": {},
    "orgId": "24debee8-6b0b-44f9-b9e5-a2312a8e4c41",
    "orgName": "adrianurbinamendoza",
    "userId": "pBrmxyLH1zXZFXlpHw",
    "userName": "adrianurbinamendoza",
    "serviceProviderAwsAccountId": "254780740814",
    "serviceProviderAwsCfStackName": "diagram-usuarios-dev",
    "serviceProviderAwsCfStackId": "arn:aws:cloudformation:us-east-1:254780740814:stack/diagram-usuarios-dev/fa2b99e0-4f1e-11f0-bbec-0affe4342a45",
    "serviceProviderAwsCfStackCreated": "2025-06-22T04:11:31.474Z",
    "serviceProviderAwsCfStackUpdated": null,
    "serviceProviderAwsCfStackStatus": "CREATE_COMPLETE",
    "serviceProviderAwsCfStackOutputs": [
      {
        "OutputKey": "RegistrarLambdaFunctionQualifiedArn",
        "OutputValue": "arn:aws:lambda:us-east-1:254780740814:function:diagram-usuarios-dev-registrar:1",
        "Description": "Current Lambda function version",
        "ExportName": "sls-diagram-usuarios-dev-RegistrarLambdaFunctionQualifiedArn"
      },
      {
        "OutputKey": "ValidarLambdaFunctionQualifiedArn",
        "OutputValue": "arn:aws:lambda:us-east-1:254780740814:function:diagram-usuarios-dev-validar:1",
        "Description": "Current Lambda function version",
        "ExportName": "sls-diagram-usuarios-dev-ValidarLambdaFunctionQualifiedArn"
      },
      {
        "OutputKey": "LoginLambdaFunctionQualifiedArn",
        "OutputValue": "arn:aws:lambda:us-east-1:254780740814:function:diagram-usuarios-dev-login:1",
        "Description": "Current Lambda function version",
        "ExportName": "sls-diagram-usuarios-dev-LoginLambdaFunctionQualifiedArn"
      },
      {
        "OutputKey": "ServiceEndpoint",
        "OutputValue": "https://d1g6vyk1f5.execute-api.us-east-1.amazonaws.com/dev",
        "Description": "URL of the service endpoint",
        "ExportName": "sls-diagram-usuarios-dev-ServiceEndpoint"
      },
      {
        "OutputKey": "ServerlessDeploymentBucketName",
        "OutputValue": "serverless-framework-deployments-us-east-1-b0f2789c-f672",
        "ExportName": "sls-diagram-usuarios-dev-ServerlessDeploymentBucketName"
      }
    ],
    "compiledCloudFormationTemplate": {
      "AWSTemplateFormatVersion": "2010-09-09",
      "Description": "The AWS CloudFormation template for this Serverless application",
      "Resources": {
        "RegistrarLogGroup": {
          "Type": "AWS::Logs::LogGroup",
          "Properties": {
            "LogGroupName": "/aws/lambda/diagram-usuarios-dev-registrar"
          }
        },
        "ValidarLogGroup": {
          "Type": "AWS::Logs::LogGroup",
          "Properties": {
            "LogGroupName": "/aws/lambda/diagram-usuarios-dev-validar"
          }
        },
        "LoginLogGroup": {
          "Type": "AWS::Logs::LogGroup",
          "Properties": {
            "LogGroupName": "/aws/lambda/diagram-usuarios-dev-login"
          }
        },
        "RegistrarLambdaFunction": {
          "Type": "AWS::Lambda::Function",
          "Properties": {
            "Code": {
              "S3Bucket": "serverless-framework-deployments-us-east-1-b0f2789c-f672",
              "S3Key": "serverless/diagram-usuarios/dev/1750565490196-2025-06-22T04:11:30.196Z/diagram-usuarios.zip"
            },
            "Handler": "UserCreate.lambda_handler",
            "Runtime": "python3.13",
            "FunctionName": "diagram-usuarios-dev-registrar",
            "MemorySize": 1024,
            "Timeout": 30,
            "Environment": {
              "Variables": {
                "TABLE_NAME": "usuarios"
              }
            },
            "Role": "arn:aws:iam::254780740814:role/LabRole"
          },
          "DependsOn": [
            "RegistrarLogGroup"
          ]
        },
        "ValidarLambdaFunction": {
          "Type": "AWS::Lambda::Function",
          "Properties": {
            "Code": {
              "S3Bucket": "serverless-framework-deployments-us-east-1-b0f2789c-f672",
              "S3Key": "serverless/diagram-usuarios/dev/1750565490196-2025-06-22T04:11:30.196Z/diagram-usuarios.zip"
            },
            "Handler": "UserValidar.lambda_handler",
            "Runtime": "python3.13",
            "FunctionName": "diagram-usuarios-dev-validar",
            "MemorySize": 1024,
            "Timeout": 30,
            "Environment": {
              "Variables": {
                "TABLE_NAME": "usuarios"
              }
            },
            "Role": "arn:aws:iam::254780740814:role/LabRole"
          },
          "DependsOn": [
            "ValidarLogGroup"
          ]
        },
        "LoginLambdaFunction": {
          "Type": "AWS::Lambda::Function",
          "Properties": {
            "Code": {
              "S3Bucket": "serverless-framework-deployments-us-east-1-b0f2789c-f672",
              "S3Key": "serverless/diagram-usuarios/dev/1750565490196-2025-06-22T04:11:30.196Z/diagram-usuarios.zip"
            },
            "Handler": "UserLogin.lambda_handler",
            "Runtime": "python3.13",
            "FunctionName": "diagram-usuarios-dev-login",
            "MemorySize": 1024,
            "Timeout": 30,
            "Environment": {
              "Variables": {
                "TABLE_NAME": "usuarios"
              }
            },
            "Role": "arn:aws:iam::254780740814:role/LabRole"
          },
          "DependsOn": [
            "LoginLogGroup"
          ]
        },
        "RegistrarLambdaVersion6JdBzmIptFNcna4PY1XBexQiLq3UOLz3c37bi5wk": {
          "Type": "AWS::Lambda::Version",
          "DeletionPolicy": "Retain",
          "Properties": {
            "FunctionName": {
              "Ref": "RegistrarLambdaFunction"
            },
            "CodeSha256": "FxO9VeVmesj/+B7sJTLx6zBIHrUGG6/ID2PdJyXLlFI="
          }
        },
        "ValidarLambdaVersiont6hTNUKz6zHm3Og6R2vNOgH2d9P5r2LwI2Yuhm6KO18": {
          "Type": "AWS::Lambda::Version",
          "DeletionPolicy": "Retain",
          "Properties": {
            "FunctionName": {
              "Ref": "ValidarLambdaFunction"
            },
            "CodeSha256": "FxO9VeVmesj/+B7sJTLx6zBIHrUGG6/ID2PdJyXLlFI="
          }
        },
        "LoginLambdaVersionkhsaEgmCCQAYVFCT2cmHiIazNkxrawVHXdMJ43ka7w": {
          "Type": "AWS::Lambda::Version",
          "DeletionPolicy": "Retain",
          "Properties": {
            "FunctionName": {
              "Ref": "LoginLambdaFunction"
            },
            "CodeSha256": "FxO9VeVmesj/+B7sJTLx6zBIHrUGG6/ID2PdJyXLlFI="
          }
        },
        "ApiGatewayRestApi": {
          "Type": "AWS::ApiGateway::RestApi",
          "Properties": {
            "Name": "dev-diagram-usuarios",
            "EndpointConfiguration": {
              "Types": [
                "EDGE"
              ]
            },
            "Policy": ""
          }
        },
        "ApiGatewayResourceUsuarios": {
          "Type": "AWS::ApiGateway::Resource",
          "Properties": {
            "ParentId": {
              "Fn::GetAtt": [
                "ApiGatewayRestApi",
                "RootResourceId"
              ]
            },
            "PathPart": "usuarios",
            "RestApiId": {
              "Ref": "ApiGatewayRestApi"
            }
          }
        },
        "ApiGatewayResourceUsuariosRegistrar": {
          "Type": "AWS::ApiGateway::Resource",
          "Properties": {
            "ParentId": {
              "Ref": "ApiGatewayResourceUsuarios"
            },
            "PathPart": "registrar",
            "RestApiId": {
              "Ref": "ApiGatewayRestApi"
            }
          }
        },
        "ApiGatewayResourceUsuariosValidar": {
          "Type": "AWS::ApiGateway::Resource",
          "Properties": {
            "ParentId": {
              "Ref": "ApiGatewayResourceUsuarios"
            },
            "PathPart": "validar",
            "RestApiId": {
              "Ref": "ApiGatewayRestApi"
            }
          }
        },
        "ApiGatewayResourceUsuariosLogin": {
          "Type": "AWS::ApiGateway::Resource",
          "Properties": {
            "ParentId": {
              "Ref": "ApiGatewayResourceUsuarios"
            },
            "PathPart": "login",
            "RestApiId": {
              "Ref": "ApiGatewayRestApi"
            }
          }
        },
        "ApiGatewayMethodUsuariosRegistrarOptions": {
          "Type": "AWS::ApiGateway::Method",
          "Properties": {
            "AuthorizationType": "NONE",
            "HttpMethod": "OPTIONS",
            "MethodResponses": [
              {
                "StatusCode": "200",
                "ResponseParameters": {
                  "method.response.header.Access-Control-Allow-Origin": true,
                  "method.response.header.Access-Control-Allow-Headers": true,
                  "method.response.header.Access-Control-Allow-Methods": true
                },
                "ResponseModels": {}
              }
            ],
            "RequestParameters": {},
            "Integration": {
              "Type": "MOCK",
              "RequestTemplates": {
                "application/json": "{statusCode:200}"
              },
              "ContentHandling": "CONVERT_TO_TEXT",
              "IntegrationResponses": [
                {
                  "StatusCode": "200",
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": "'*'",
                    "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                    "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,POST'"
                  },
                  "ResponseTemplates": {
                    "application/json": ""
                  }
                }
              ]
            },
            "ResourceId": {
              "Ref": "ApiGatewayResourceUsuariosRegistrar"
            },
            "RestApiId": {
              "Ref": "ApiGatewayRestApi"
            }
          }
        },
        "ApiGatewayMethodUsuariosValidarOptions": {
          "Type": "AWS::ApiGateway::Method",
          "Properties": {
            "AuthorizationType": "NONE",
            "HttpMethod": "OPTIONS",
            "MethodResponses": [
              {
                "StatusCode": "200",
                "ResponseParameters": {
                  "method.response.header.Access-Control-Allow-Origin": true,
                  "method.response.header.Access-Control-Allow-Headers": true,
                  "method.response.header.Access-Control-Allow-Methods": true
                },
                "ResponseModels": {}
              }
            ],
            "RequestParameters": {},
            "Integration": {
              "Type": "MOCK",
              "RequestTemplates": {
                "application/json": "{statusCode:200}"
              },
              "ContentHandling": "CONVERT_TO_TEXT",
              "IntegrationResponses": [
                {
                  "StatusCode": "200",
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": "'*'",
                    "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                    "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,POST'"
                  },
                  "ResponseTemplates": {
                    "application/json": ""
                  }
                }
              ]
            },
            "ResourceId": {
              "Ref": "ApiGatewayResourceUsuariosValidar"
            },
            "RestApiId": {
              "Ref": "ApiGatewayRestApi"
            }
          }
        },
        "ApiGatewayMethodUsuariosLoginOptions": {
          "Type": "AWS::ApiGateway::Method",
          "Properties": {
            "AuthorizationType": "NONE",
            "HttpMethod": "OPTIONS",
            "MethodResponses": [
              {
                "StatusCode": "200",
                "ResponseParameters": {
                  "method.response.header.Access-Control-Allow-Origin": true,
                  "method.response.header.Access-Control-Allow-Headers": true,
                  "method.response.header.Access-Control-Allow-Methods": true
                },
                "ResponseModels": {}
              }
            ],
            "RequestParameters": {},
            "Integration": {
              "Type": "MOCK",
              "RequestTemplates": {
                "application/json": "{statusCode:200}"
              },
              "ContentHandling": "CONVERT_TO_TEXT",
              "IntegrationResponses": [
                {
                  "StatusCode": "200",
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": "'*'",
                    "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                    "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,POST'"
                  },
                  "ResponseTemplates": {
                    "application/json": ""
                  }
                }
              ]
            },
            "ResourceId": {
              "Ref": "ApiGatewayResourceUsuariosLogin"
            },
            "RestApiId": {
              "Ref": "ApiGatewayRestApi"
            }
          }
        },
        "ApiGatewayMethodUsuariosRegistrarPost": {
          "Type": "AWS::ApiGateway::Method",
          "Properties": {
            "HttpMethod": "POST",
            "RequestParameters": {},
            "ResourceId": {
              "Ref": "ApiGatewayResourceUsuariosRegistrar"
            },
            "RestApiId": {
              "Ref": "ApiGatewayRestApi"
            },
            "ApiKeyRequired": "<REDACTED>",
            "AuthorizationType": "NONE",
            "Integration": {
              "IntegrationHttpMethod": "POST",
              "Type": "AWS",
              "Uri": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":apigateway:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":lambda:path/2015-03-31/functions/",
                    {
                      "Fn::GetAtt": [
                        "RegistrarLambdaFunction",
                        "Arn"
                      ]
                    },
                    "/invocations"
                  ]
                ]
              },
              "PassthroughBehavior": "NEVER",
              "RequestTemplates": {
                "application/json": "\n    #set( $body = $input.json(\"$\") )\n\n    \n  #define( $loop )\n    {\n    #foreach($key in $map.keySet())\n        #set( $k = $util.escapeJavaScript($key) )\n        #set( $v = $util.escapeJavaScript($map.get($key)).replaceAll(\"\\\\'\", \"'\") )\n        \"$k\":\n          \"$v\"\n          #if( $foreach.hasNext ) , #end\n    #end\n    }\n  #end\n\n  {\n    \"body\": $body,\n    \"method\": \"$context.httpMethod\",\n    \"principalId\": \"$context.authorizer.principalId\",\n    \"stage\": \"$context.stage\",\n\n    \"cognitoPoolClaims\" : {\n       \n       \"sub\": \"$context.authorizer.claims.sub\"\n    },\n\n    #set( $map = $context.authorizer )\n    \"enhancedAuthContext\": $loop,\n\n    #set( $map = $input.params().header )\n    \"headers\": $loop,\n\n    #set( $map = $input.params().querystring )\n    \"query\": $loop,\n\n    #set( $map = $input.params().path )\n    \"path\": $loop,\n\n    #set( $map = $context.identity )\n    \"identity\": $loop,\n\n    #set( $map = $stageVariables )\n    \"stageVariables\": $loop,\n\n    \"requestPath\": \"$context.resourcePath\"\n  }\n\n  ",
                "application/x-www-form-urlencoded": "\n    #define( $body )\n      {\n      #foreach( $token in $input.path('$').split('&') )\n        #set( $keyVal = $token.split('=') )\n        #set( $keyValSize = $keyVal.size() )\n        #if( $keyValSize >= 1 )\n          #set( $key = $util.escapeJavaScript($util.urlDecode($keyVal[0])) )\n          #if( $keyValSize >= 2 )\n            #set($val = $util.escapeJavaScript($util.urlDecode($keyVal[1])).replaceAll(\"\\\\'\",\"'\"))\n          #else\n            #set( $val = '' )\n          #end\n          \"$key\": \"$val\"#if($foreach.hasNext),#end\n        #end\n      #end\n      }\n    #end\n\n    \n  #define( $loop )\n    {\n    #foreach($key in $map.keySet())\n        #set( $k = $util.escapeJavaScript($key) )\n        #set( $v = $util.escapeJavaScript($map.get($key)).replaceAll(\"\\\\'\", \"'\") )\n        \"$k\":\n          \"$v\"\n          #if( $foreach.hasNext ) , #end\n    #end\n    }\n  #end\n\n  {\n    \"body\": $body,\n    \"method\": \"$context.httpMethod\",\n    \"principalId\": \"$context.authorizer.principalId\",\n    \"stage\": \"$context.stage\",\n\n    \"cognitoPoolClaims\" : {\n       \n       \"sub\": \"$context.authorizer.claims.sub\"\n    },\n\n    #set( $map = $context.authorizer )\n    \"enhancedAuthContext\": $loop,\n\n    #set( $map = $input.params().header )\n    \"headers\": $loop,\n\n    #set( $map = $input.params().querystring )\n    \"query\": $loop,\n\n    #set( $map = $input.params().path )\n    \"path\": $loop,\n\n    #set( $map = $context.identity )\n    \"identity\": $loop,\n\n    #set( $map = $stageVariables )\n    \"stageVariables\": $loop,\n\n    \"requestPath\": \"$context.resourcePath\"\n  }\n\n  "
              },
              "IntegrationResponses": [
                {
                  "StatusCode": "200",
                  "SelectionPattern": "",
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": "'*'"
                  },
                  "ResponseTemplates": {}
                },
                {
                  "StatusCode": "400",
                  "SelectionPattern": "[\\s\\S]*\\[400\\][\\s\\S]*",
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": "'*'"
                  },
                  "ResponseTemplates": {}
                },
                {
                  "StatusCode": "401",
                  "SelectionPattern": "[\\s\\S]*\\[401\\][\\s\\S]*",
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": "'*'"
                  },
                  "ResponseTemplates": {}
                },
                {
                  "StatusCode": "403",
                  "SelectionPattern": "[\\s\\S]*\\[403\\][\\s\\S]*",
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": "'*'"
                  },
                  "ResponseTemplates": {}
                },
                {
                  "StatusCode": "404",
                  "SelectionPattern": "[\\s\\S]*\\[404\\][\\s\\S]*",
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": "'*'"
                  },
                  "ResponseTemplates": {}
                },
                {
                  "StatusCode": "422",
                  "SelectionPattern": "[\\s\\S]*\\[422\\][\\s\\S]*",
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": "'*'"
                  },
                  "ResponseTemplates": {}
                },
                {
                  "StatusCode": "500",
                  "SelectionPattern": "[\\s\\S]*(Process\\s?exited\\s?before\\s?completing\\s?request|\\[500\\])[\\s\\S]*",
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": "'*'"
                  },
                  "ResponseTemplates": {}
                },
                {
                  "StatusCode": "502",
                  "SelectionPattern": "[\\s\\S]*\\[502\\][\\s\\S]*",
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": "'*'"
                  },
                  "ResponseTemplates": {}
                },
                {
                  "StatusCode": "504",
                  "SelectionPattern": "([\\s\\S]*\\[504\\][\\s\\S]*)|(.*Task timed out after \\d+\\.\\d+ seconds$)",
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": "'*'"
                  },
                  "ResponseTemplates": {}
                }
              ]
            },
            "MethodResponses": [
              {
                "ResponseParameters": {
                  "method.response.header.Access-Control-Allow-Origin": true
                },
                "ResponseModels": {},
                "StatusCode": "200"
              },
              {
                "ResponseParameters": {
                  "method.response.header.Access-Control-Allow-Origin": true
                },
                "ResponseModels": {},
                "StatusCode": "400"
              },
              {
                "ResponseParameters": {
                  "method.response.header.Access-Control-Allow-Origin": true
                },
                "ResponseModels": {},
                "StatusCode": "401"
              },
              {
                "ResponseParameters": {
                  "method.response.header.Access-Control-Allow-Origin": true
                },
                "ResponseModels": {},
                "StatusCode": "403"
              },
              {
                "ResponseParameters": {
                  "method.response.header.Access-Control-Allow-Origin": true
                },
                "ResponseModels": {},
                "StatusCode": "404"
              },
              {
                "ResponseParameters": {
                  "method.response.header.Access-Control-Allow-Origin": true
                },
                "ResponseModels": {},
                "StatusCode": "422"
              },
              {
                "ResponseParameters": {
                  "method.response.header.Access-Control-Allow-Origin": true
                },
                "ResponseModels": {},
                "StatusCode": "500"
              },
              {
                "ResponseParameters": {
                  "method.response.header.Access-Control-Allow-Origin": true
                },
                "ResponseModels": {},
                "StatusCode": "502"
              },
              {
                "ResponseParameters": {
                  "method.response.header.Access-Control-Allow-Origin": true
                },
                "ResponseModels": {},
                "StatusCode": "504"
              }
            ]
          },
          "DependsOn": [
            "RegistrarLambdaPermissionApiGateway"
          ]
        },
        "ApiGatewayMethodUsuariosValidarPost": {
          "Type": "AWS::ApiGateway::Method",
          "Properties": {
            "HttpMethod": "POST",
            "RequestParameters": {},
            "ResourceId": {
              "Ref": "ApiGatewayResourceUsuariosValidar"
            },
            "RestApiId": {
              "Ref": "ApiGatewayRestApi"
            },
            "ApiKeyRequired": "<REDACTED>",
            "AuthorizationType": "NONE",
            "Integration": {
              "IntegrationHttpMethod": "POST",
              "Type": "AWS",
              "Uri": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":apigateway:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":lambda:path/2015-03-31/functions/",
                    {
                      "Fn::GetAtt": [
                        "ValidarLambdaFunction",
                        "Arn"
                      ]
                    },
                    "/invocations"
                  ]
                ]
              },
              "PassthroughBehavior": "NEVER",
              "RequestTemplates": {
                "application/json": "\n    #set( $body = $input.json(\"$\") )\n\n    \n  #define( $loop )\n    {\n    #foreach($key in $map.keySet())\n        #set( $k = $util.escapeJavaScript($key) )\n        #set( $v = $util.escapeJavaScript($map.get($key)).replaceAll(\"\\\\'\", \"'\") )\n        \"$k\":\n          \"$v\"\n          #if( $foreach.hasNext ) , #end\n    #end\n    }\n  #end\n\n  {\n    \"body\": $body,\n    \"method\": \"$context.httpMethod\",\n    \"principalId\": \"$context.authorizer.principalId\",\n    \"stage\": \"$context.stage\",\n\n    \"cognitoPoolClaims\" : {\n       \n       \"sub\": \"$context.authorizer.claims.sub\"\n    },\n\n    #set( $map = $context.authorizer )\n    \"enhancedAuthContext\": $loop,\n\n    #set( $map = $input.params().header )\n    \"headers\": $loop,\n\n    #set( $map = $input.params().querystring )\n    \"query\": $loop,\n\n    #set( $map = $input.params().path )\n    \"path\": $loop,\n\n    #set( $map = $context.identity )\n    \"identity\": $loop,\n\n    #set( $map = $stageVariables )\n    \"stageVariables\": $loop,\n\n    \"requestPath\": \"$context.resourcePath\"\n  }\n\n  ",
                "application/x-www-form-urlencoded": "\n    #define( $body )\n      {\n      #foreach( $token in $input.path('$').split('&') )\n        #set( $keyVal = $token.split('=') )\n        #set( $keyValSize = $keyVal.size() )\n        #if( $keyValSize >= 1 )\n          #set( $key = $util.escapeJavaScript($util.urlDecode($keyVal[0])) )\n          #if( $keyValSize >= 2 )\n            #set($val = $util.escapeJavaScript($util.urlDecode($keyVal[1])).replaceAll(\"\\\\'\",\"'\"))\n          #else\n            #set( $val = '' )\n          #end\n          \"$key\": \"$val\"#if($foreach.hasNext),#end\n        #end\n      #end\n      }\n    #end\n\n    \n  #define( $loop )\n    {\n    #foreach($key in $map.keySet())\n        #set( $k = $util.escapeJavaScript($key) )\n        #set( $v = $util.escapeJavaScript($map.get($key)).replaceAll(\"\\\\'\", \"'\") )\n        \"$k\":\n          \"$v\"\n          #if( $foreach.hasNext ) , #end\n    #end\n    }\n  #end\n\n  {\n    \"body\": $body,\n    \"method\": \"$context.httpMethod\",\n    \"principalId\": \"$context.authorizer.principalId\",\n    \"stage\": \"$context.stage\",\n\n    \"cognitoPoolClaims\" : {\n       \n       \"sub\": \"$context.authorizer.claims.sub\"\n    },\n\n    #set( $map = $context.authorizer )\n    \"enhancedAuthContext\": $loop,\n\n    #set( $map = $input.params().header )\n    \"headers\": $loop,\n\n    #set( $map = $input.params().querystring )\n    \"query\": $loop,\n\n    #set( $map = $input.params().path )\n    \"path\": $loop,\n\n    #set( $map = $context.identity )\n    \"identity\": $loop,\n\n    #set( $map = $stageVariables )\n    \"stageVariables\": $loop,\n\n    \"requestPath\": \"$context.resourcePath\"\n  }\n\n  "
              },
              "IntegrationResponses": [
                {
                  "StatusCode": "200",
                  "SelectionPattern": "",
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": "'*'"
                  },
                  "ResponseTemplates": {}
                },
                {
                  "StatusCode": "400",
                  "SelectionPattern": "[\\s\\S]*\\[400\\][\\s\\S]*",
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": "'*'"
                  },
                  "ResponseTemplates": {}
                },
                {
                  "StatusCode": "401",
                  "SelectionPattern": "[\\s\\S]*\\[401\\][\\s\\S]*",
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": "'*'"
                  },
                  "ResponseTemplates": {}
                },
                {
                  "StatusCode": "403",
                  "SelectionPattern": "[\\s\\S]*\\[403\\][\\s\\S]*",
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": "'*'"
                  },
                  "ResponseTemplates": {}
                },
                {
                  "StatusCode": "404",
                  "SelectionPattern": "[\\s\\S]*\\[404\\][\\s\\S]*",
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": "'*'"
                  },
                  "ResponseTemplates": {}
                },
                {
                  "StatusCode": "422",
                  "SelectionPattern": "[\\s\\S]*\\[422\\][\\s\\S]*",
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": "'*'"
                  },
                  "ResponseTemplates": {}
                },
                {
                  "StatusCode": "500",
                  "SelectionPattern": "[\\s\\S]*(Process\\s?exited\\s?before\\s?completing\\s?request|\\[500\\])[\\s\\S]*",
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": "'*'"
                  },
                  "ResponseTemplates": {}
                },
                {
                  "StatusCode": "502",
                  "SelectionPattern": "[\\s\\S]*\\[502\\][\\s\\S]*",
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": "'*'"
                  },
                  "ResponseTemplates": {}
                },
                {
                  "StatusCode": "504",
                  "SelectionPattern": "([\\s\\S]*\\[504\\][\\s\\S]*)|(.*Task timed out after \\d+\\.\\d+ seconds$)",
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": "'*'"
                  },
                  "ResponseTemplates": {}
                }
              ]
            },
            "MethodResponses": [
              {
                "ResponseParameters": {
                  "method.response.header.Access-Control-Allow-Origin": true
                },
                "ResponseModels": {},
                "StatusCode": "200"
              },
              {
                "ResponseParameters": {
                  "method.response.header.Access-Control-Allow-Origin": true
                },
                "ResponseModels": {},
                "StatusCode": "400"
              },
              {
                "ResponseParameters": {
                  "method.response.header.Access-Control-Allow-Origin": true
                },
                "ResponseModels": {},
                "StatusCode": "401"
              },
              {
                "ResponseParameters": {
                  "method.response.header.Access-Control-Allow-Origin": true
                },
                "ResponseModels": {},
                "StatusCode": "403"
              },
              {
                "ResponseParameters": {
                  "method.response.header.Access-Control-Allow-Origin": true
                },
                "ResponseModels": {},
                "StatusCode": "404"
              },
              {
                "ResponseParameters": {
                  "method.response.header.Access-Control-Allow-Origin": true
                },
                "ResponseModels": {},
                "StatusCode": "422"
              },
              {
                "ResponseParameters": {
                  "method.response.header.Access-Control-Allow-Origin": true
                },
                "ResponseModels": {},
                "StatusCode": "500"
              },
              {
                "ResponseParameters": {
                  "method.response.header.Access-Control-Allow-Origin": true
                },
                "ResponseModels": {},
                "StatusCode": "502"
              },
              {
                "ResponseParameters": {
                  "method.response.header.Access-Control-Allow-Origin": true
                },
                "ResponseModels": {},
                "StatusCode": "504"
              }
            ]
          },
          "DependsOn": [
            "ValidarLambdaPermissionApiGateway"
          ]
        },
        "ApiGatewayMethodUsuariosLoginPost": {
          "Type": "AWS::ApiGateway::Method",
          "Properties": {
            "HttpMethod": "POST",
            "RequestParameters": {},
            "ResourceId": {
              "Ref": "ApiGatewayResourceUsuariosLogin"
            },
            "RestApiId": {
              "Ref": "ApiGatewayRestApi"
            },
            "ApiKeyRequired": "<REDACTED>",
            "AuthorizationType": "NONE",
            "Integration": {
              "IntegrationHttpMethod": "POST",
              "Type": "AWS",
              "Uri": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":apigateway:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":lambda:path/2015-03-31/functions/",
                    {
                      "Fn::GetAtt": [
                        "LoginLambdaFunction",
                        "Arn"
                      ]
                    },
                    "/invocations"
                  ]
                ]
              },
              "PassthroughBehavior": "NEVER",
              "RequestTemplates": {
                "application/json": "\n    #set( $body = $input.json(\"$\") )\n\n    \n  #define( $loop )\n    {\n    #foreach($key in $map.keySet())\n        #set( $k = $util.escapeJavaScript($key) )\n        #set( $v = $util.escapeJavaScript($map.get($key)).replaceAll(\"\\\\'\", \"'\") )\n        \"$k\":\n          \"$v\"\n          #if( $foreach.hasNext ) , #end\n    #end\n    }\n  #end\n\n  {\n    \"body\": $body,\n    \"method\": \"$context.httpMethod\",\n    \"principalId\": \"$context.authorizer.principalId\",\n    \"stage\": \"$context.stage\",\n\n    \"cognitoPoolClaims\" : {\n       \n       \"sub\": \"$context.authorizer.claims.sub\"\n    },\n\n    #set( $map = $context.authorizer )\n    \"enhancedAuthContext\": $loop,\n\n    #set( $map = $input.params().header )\n    \"headers\": $loop,\n\n    #set( $map = $input.params().querystring )\n    \"query\": $loop,\n\n    #set( $map = $input.params().path )\n    \"path\": $loop,\n\n    #set( $map = $context.identity )\n    \"identity\": $loop,\n\n    #set( $map = $stageVariables )\n    \"stageVariables\": $loop,\n\n    \"requestPath\": \"$context.resourcePath\"\n  }\n\n  ",
                "application/x-www-form-urlencoded": "\n    #define( $body )\n      {\n      #foreach( $token in $input.path('$').split('&') )\n        #set( $keyVal = $token.split('=') )\n        #set( $keyValSize = $keyVal.size() )\n        #if( $keyValSize >= 1 )\n          #set( $key = $util.escapeJavaScript($util.urlDecode($keyVal[0])) )\n          #if( $keyValSize >= 2 )\n            #set($val = $util.escapeJavaScript($util.urlDecode($keyVal[1])).replaceAll(\"\\\\'\",\"'\"))\n          #else\n            #set( $val = '' )\n          #end\n          \"$key\": \"$val\"#if($foreach.hasNext),#end\n        #end\n      #end\n      }\n    #end\n\n    \n  #define( $loop )\n    {\n    #foreach($key in $map.keySet())\n        #set( $k = $util.escapeJavaScript($key) )\n        #set( $v = $util.escapeJavaScript($map.get($key)).replaceAll(\"\\\\'\", \"'\") )\n        \"$k\":\n          \"$v\"\n          #if( $foreach.hasNext ) , #end\n    #end\n    }\n  #end\n\n  {\n    \"body\": $body,\n    \"method\": \"$context.httpMethod\",\n    \"principalId\": \"$context.authorizer.principalId\",\n    \"stage\": \"$context.stage\",\n\n    \"cognitoPoolClaims\" : {\n       \n       \"sub\": \"$context.authorizer.claims.sub\"\n    },\n\n    #set( $map = $context.authorizer )\n    \"enhancedAuthContext\": $loop,\n\n    #set( $map = $input.params().header )\n    \"headers\": $loop,\n\n    #set( $map = $input.params().querystring )\n    \"query\": $loop,\n\n    #set( $map = $input.params().path )\n    \"path\": $loop,\n\n    #set( $map = $context.identity )\n    \"identity\": $loop,\n\n    #set( $map = $stageVariables )\n    \"stageVariables\": $loop,\n\n    \"requestPath\": \"$context.resourcePath\"\n  }\n\n  "
              },
              "IntegrationResponses": [
                {
                  "StatusCode": "200",
                  "SelectionPattern": "",
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": "'*'"
                  },
                  "ResponseTemplates": {}
                },
                {
                  "StatusCode": "400",
                  "SelectionPattern": "[\\s\\S]*\\[400\\][\\s\\S]*",
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": "'*'"
                  },
                  "ResponseTemplates": {}
                },
                {
                  "StatusCode": "401",
                  "SelectionPattern": "[\\s\\S]*\\[401\\][\\s\\S]*",
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": "'*'"
                  },
                  "ResponseTemplates": {}
                },
                {
                  "StatusCode": "403",
                  "SelectionPattern": "[\\s\\S]*\\[403\\][\\s\\S]*",
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": "'*'"
                  },
                  "ResponseTemplates": {}
                },
                {
                  "StatusCode": "404",
                  "SelectionPattern": "[\\s\\S]*\\[404\\][\\s\\S]*",
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": "'*'"
                  },
                  "ResponseTemplates": {}
                },
                {
                  "StatusCode": "422",
                  "SelectionPattern": "[\\s\\S]*\\[422\\][\\s\\S]*",
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": "'*'"
                  },
                  "ResponseTemplates": {}
                },
                {
                  "StatusCode": "500",
                  "SelectionPattern": "[\\s\\S]*(Process\\s?exited\\s?before\\s?completing\\s?request|\\[500\\])[\\s\\S]*",
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": "'*'"
                  },
                  "ResponseTemplates": {}
                },
                {
                  "StatusCode": "502",
                  "SelectionPattern": "[\\s\\S]*\\[502\\][\\s\\S]*",
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": "'*'"
                  },
                  "ResponseTemplates": {}
                },
                {
                  "StatusCode": "504",
                  "SelectionPattern": "([\\s\\S]*\\[504\\][\\s\\S]*)|(.*Task timed out after \\d+\\.\\d+ seconds$)",
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": "'*'"
                  },
                  "ResponseTemplates": {}
                }
              ]
            },
            "MethodResponses": [
              {
                "ResponseParameters": {
                  "method.response.header.Access-Control-Allow-Origin": true
                },
                "ResponseModels": {},
                "StatusCode": "200"
              },
              {
                "ResponseParameters": {
                  "method.response.header.Access-Control-Allow-Origin": true
                },
                "ResponseModels": {},
                "StatusCode": "400"
              },
              {
                "ResponseParameters": {
                  "method.response.header.Access-Control-Allow-Origin": true
                },
                "ResponseModels": {},
                "StatusCode": "401"
              },
              {
                "ResponseParameters": {
                  "method.response.header.Access-Control-Allow-Origin": true
                },
                "ResponseModels": {},
                "StatusCode": "403"
              },
              {
                "ResponseParameters": {
                  "method.response.header.Access-Control-Allow-Origin": true
                },
                "ResponseModels": {},
                "StatusCode": "404"
              },
              {
                "ResponseParameters": {
                  "method.response.header.Access-Control-Allow-Origin": true
                },
                "ResponseModels": {},
                "StatusCode": "422"
              },
              {
                "ResponseParameters": {
                  "method.response.header.Access-Control-Allow-Origin": true
                },
                "ResponseModels": {},
                "StatusCode": "500"
              },
              {
                "ResponseParameters": {
                  "method.response.header.Access-Control-Allow-Origin": true
                },
                "ResponseModels": {},
                "StatusCode": "502"
              },
              {
                "ResponseParameters": {
                  "method.response.header.Access-Control-Allow-Origin": true
                },
                "ResponseModels": {},
                "StatusCode": "504"
              }
            ]
          },
          "DependsOn": [
            "LoginLambdaPermissionApiGateway"
          ]
        },
        "ApiGatewayDeployment1750565480167": {
          "Type": "AWS::ApiGateway::Deployment",
          "Properties": {
            "RestApiId": {
              "Ref": "ApiGatewayRestApi"
            },
            "StageName": "dev"
          },
          "DependsOn": [
            "ApiGatewayMethodUsuariosRegistrarOptions",
            "ApiGatewayMethodUsuariosValidarOptions",
            "ApiGatewayMethodUsuariosLoginOptions",
            "ApiGatewayMethodUsuariosRegistrarPost",
            "ApiGatewayMethodUsuariosValidarPost",
            "ApiGatewayMethodUsuariosLoginPost"
          ]
        },
        "RegistrarLambdaPermissionApiGateway": {
          "Type": "AWS::Lambda::Permission",
          "Properties": {
            "FunctionName": {
              "Fn::GetAtt": [
                "RegistrarLambdaFunction",
                "Arn"
              ]
            },
            "Action": "lambda:InvokeFunction",
            "Principal": "apigateway.amazonaws.com",
            "SourceArn": {
              "Fn::Join": [
                "",
                [
                  "arn:",
                  {
                    "Ref": "AWS::Partition"
                  },
                  ":execute-api:",
                  {
                    "Ref": "AWS::Region"
                  },
                  ":",
                  {
                    "Ref": "AWS::AccountId"
                  },
                  ":",
                  {
                    "Ref": "ApiGatewayRestApi"
                  },
                  "/*/*"
                ]
              ]
            }
          }
        },
        "ValidarLambdaPermissionApiGateway": {
          "Type": "AWS::Lambda::Permission",
          "Properties": {
            "FunctionName": {
              "Fn::GetAtt": [
                "ValidarLambdaFunction",
                "Arn"
              ]
            },
            "Action": "lambda:InvokeFunction",
            "Principal": "apigateway.amazonaws.com",
            "SourceArn": {
              "Fn::Join": [
                "",
                [
                  "arn:",
                  {
                    "Ref": "AWS::Partition"
                  },
                  ":execute-api:",
                  {
                    "Ref": "AWS::Region"
                  },
                  ":",
                  {
                    "Ref": "AWS::AccountId"
                  },
                  ":",
                  {
                    "Ref": "ApiGatewayRestApi"
                  },
                  "/*/*"
                ]
              ]
            }
          }
        },
        "LoginLambdaPermissionApiGateway": {
          "Type": "AWS::Lambda::Permission",
          "Properties": {
            "FunctionName": {
              "Fn::GetAtt": [
                "LoginLambdaFunction",
                "Arn"
              ]
            },
            "Action": "lambda:InvokeFunction",
            "Principal": "apigateway.amazonaws.com",
            "SourceArn": {
              "Fn::Join": [
                "",
                [
                  "arn:",
                  {
                    "Ref": "AWS::Partition"
                  },
                  ":execute-api:",
                  {
                    "Ref": "AWS::Region"
                  },
                  ":",
                  {
                    "Ref": "AWS::AccountId"
                  },
                  ":",
                  {
                    "Ref": "ApiGatewayRestApi"
                  },
                  "/*/*"
                ]
              ]
            }
          }
        },
        "Usuarios": {
          "Type": "AWS::DynamoDB::Table",
          "Properties": {
            "TableName": "usuarios",
            "AttributeDefinitions": [
              {
                "AttributeName": "tenant_id",
                "AttributeType": "S"
              },
              {
                "AttributeName": "user_id",
                "AttributeType": "S"
              }
            ],
            "KeySchema": [
              {
                "AttributeName": "tenant_id",
                "KeyType": "HASH"
              },
              {
                "AttributeName": "user_id",
                "KeyType": "RANGE"
              }
            ],
            "BillingMode": "PAY_PER_REQUEST"
          }
        },
        "TokenUsuarios": "<REDACTED>"
      },
      "Outputs": {
        "ServerlessDeploymentBucketName": {
          "Value": "serverless-framework-deployments-us-east-1-b0f2789c-f672",
          "Export": {
            "Name": "sls-diagram-usuarios-dev-ServerlessDeploymentBucketName"
          }
        },
        "RegistrarLambdaFunctionQualifiedArn": {
          "Description": "Current Lambda function version",
          "Value": {
            "Ref": "RegistrarLambdaVersion6JdBzmIptFNcna4PY1XBexQiLq3UOLz3c37bi5wk"
          },
          "Export": {
            "Name": "sls-diagram-usuarios-dev-RegistrarLambdaFunctionQualifiedArn"
          }
        },
        "ValidarLambdaFunctionQualifiedArn": {
          "Description": "Current Lambda function version",
          "Value": {
            "Ref": "ValidarLambdaVersiont6hTNUKz6zHm3Og6R2vNOgH2d9P5r2LwI2Yuhm6KO18"
          },
          "Export": {
            "Name": "sls-diagram-usuarios-dev-ValidarLambdaFunctionQualifiedArn"
          }
        },
        "LoginLambdaFunctionQualifiedArn": {
          "Description": "Current Lambda function version",
          "Value": {
            "Ref": "LoginLambdaVersionkhsaEgmCCQAYVFCT2cmHiIazNkxrawVHXdMJ43ka7w"
          },
          "Export": {
            "Name": "sls-diagram-usuarios-dev-LoginLambdaFunctionQualifiedArn"
          }
        },
        "ServiceEndpoint": {
          "Description": "URL of the service endpoint",
          "Value": {
            "Fn::Join": [
              "",
              [
                "https://",
                {
                  "Ref": "ApiGatewayRestApi"
                },
                ".execute-api.",
                {
                  "Ref": "AWS::Region"
                },
                ".",
                {
                  "Ref": "AWS::URLSuffix"
                },
                "/dev"
              ]
            ]
          },
          "Export": {
            "Name": "sls-diagram-usuarios-dev-ServiceEndpoint"
          }
        }
      }
    }
  }
}